Table
2018年11月3日
15:37
表格数据在获取后预处理：
预处理时间
dataedit(value){
value.forEach((item)=>{
var time = new Date(item.createdTime.time).toLocaleString()
Vue.set(item,'creatTime',time)
})
return value
},
this.tableData = this.dataedit(re.data)
 
row-click函数输入的参数row是每行的key
 
表格样式：
:row-style='rowClass'
rowClass: function () {
return {
"font-size": "14px"
}
}
 
全局设置：
.el-table td,.el-table th {
padding: 0;
}
 
.el-form-item{
Margin-bottom:0;
}
 
 
 
 
 
 
 
表格表头错位问题：
在app.vue文件中添加
.el-table th.gutter{
display:table-cell !important;
}
.el-table colgroup.gutter{
display:table-cell !important;
}
 
 
多选
手动添加一个el-table-column，设type属性为selection即可
序号
手动添加一个el-table-column，设type属性为index即可
 
筛选导致需要重新计算合并行问题
 
筛选后显示出来的表格数据就不是原来的table数据；
不能再使用之前的数据获取行合并合并数组
筛选不会更改原始数据只会更改显示数据
 
 
filtered-value        选中的数据过滤项，如果需要自定义表头过滤的渲染方式，可能会需要此属性。页面加载显示的过滤选项
 
filter-method 数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示。
 
clearFilter  用于清空过滤条件，数据会恢复成未过滤的状态
 
filter-change  当表格的筛选条件发生变化的时候会触发该事件，参数的值是一个对象，对象的 key 是 column 的 columnKey，对应的 value 为用户选择的筛选条件的数组。
 
column-key='softwareType' 
 
表格数据经过筛选后两种处理方法
1重新获取表格数据，再次渲染表格
2重新获取行合并的合并数组
 
<el-table :data="softwaresListData"  :max-height="searchFileTableHeight" :span-method="arraySpanMethod" @filter-change="filterChange"
           highlight-current-row border :row-style='rowClass' ref='table'>
 
 
<el-table-column prop="softwareType" label="软件类型" width="110" :filters="filtersSoftwareType"
            :filter-method="filterHandler3" column-key='softwareType' >
 
      filterChange(obj){
        // console.log('change',obj)
        if(obj.softwareType.length>0){
          this.filterTableData=this.softwaresListData.filter((items)=>{
            return obj.softwareType.indexOf(items.softwareType) > -1
          })
        }else{
          this.filterTableData=this.softwaresListData
        }
      },
 
行合并数组，使用过滤后的数据进行计算
var data = this.getSpanArr(this.filterTableData, 'assemblyType','bomCode','workProcedure','stationCode');
    
 
注意：切换表格内容筛选重置 
this.$refs.table.clearFilter();
筛选
filterHandler(value, row, column) {
         const property = column.property;
         return row[property] === value;
}
列筛选：
定义筛选列
<el-table-column prop="workProcedure" label="工序" width="80" :filters="filtersWorkProcedure"
:filter-method="filterHandler1"></el-table-column>
定义筛选项数组
this.editArr(item.workProcedure,arr2,this.filtersWorkProcedure)
//{text:`${obj}`,value:`${obj}`}
 
editArr(obj,arr,brr) {//筛选列数组处理,剔除相同项
if(obj){
if (arr.indexOf(obj) === -1) {
arr.push(obj)
brr.push({text:`${obj}`,value:`${obj}`})
}
}
}
定义筛选方法（固定）
filterHandler1(value, row, column) {
const property = column.property;
return row[property] === value;
},
 
 
行合并：
定义合并方法
<el-table :data="softwaresListData" :span-method="arraySpanMethod"
 
每列合并的数组
getSpanArr(data, key1,key2) {//表格行合并预处理函数,key1第一列的key值，key2第二列的key值
var oneArr = [];
var twoArr = [];
var oneIndex = 0;
var twoIndex = 0;
data.forEach((item,index)=>{
if(index===0){
oneArr.push(1);
oneIndex = index;
}else{
if(item[key1]===data[index-1][key1]){
oneArr[oneIndex]+=1;
oneArr.push(0);
}else{
oneArr.push(1);
oneIndex = index;
}
}
if(oneArr[index]>0){
twoArr.push(1);
twoIndex = index;
}else{
if(item[key2]===data[index-1][key2]){
twoArr[twoIndex]+=1;
twoArr.push(0);
}else{
twoArr.push(1);
twoIndex = index;
}
}
})
return {
oneArr:oneArr,
twoArr:twoArr
}
},
合并方法：
arraySpanMethod: function ({row,column,rowIndex,columnIndex}) {
var arrData = this.getSpanArr(this.softwaresListData, 'assemblyType','bomCode')
var first = arrData.oneArr
var second = arrData.twoArr
if (columnIndex === 0) {
const row = first[rowIndex];
const col = row > 0 ? 1 : 0;
return {
rowspan: row,
colspan: col
}
} else if (columnIndex === 1) {
const row = second[rowIndex];
const col = row > 0 ? 1 : 0;
return {
rowspan: row,
colspan: col
}
}
},
 
远程模糊搜索功能
1 el-autocomplete :fetch-suggestions="projectSearch"
2 watch 检测输入框的数据变化，调取后台数据拿到待选数组
4 对待选数组过滤处理
5 调用模糊搜索回调函数
 
<el-autocomplete ref="product" class="inline-input" v-model="productName" :fetch-suggestions="projectSearch"
          placeholder="请输入工程名称" @select="selectProduct" :trigger-on-focus="false" ></el-autocomplete>
 
watch：
      productName: function (newVal) {
        this.getSelectArr(newVal)
        this.productName = ''
        this.softwaresData = {}
        this.versionsList = []
        this.softwaresListData = []
        this.productVersion = '';
        this.productName = newVal;
        this.getVersionsList();
      }
 
      getSelectArr(name){
        var _this = this
        this.restaurants = []
        const path = `${C.paramlibAddr}/api/v1/project/getProjects?name=${name}`;
        AXIOS.get(path).then(function (response) {
            _this.restaurants = response.data;
          }).catch(function (err) {
            console.log(err);
          });
      }
 
 
      projectSearch(queryString, cb) {
        // 工程名称模糊搜索
        var timeout=''
        var resultsLast=[]
        var restaurants = this.restaurants;
        if(restaurants.length>0){
          restaurants.forEach((item)=>{
            resultsLast.push({"value":item})
          })
        }
        // console.log(resultsLast)
        var results = queryString ? resultsLast.filter(this.createStateFilter(queryString)) : resultsLast;
        // console.log(results) //获取到了，但是没有在建议框显示出来是由于待搜索数组格式{"value":""}
        // 调用 callback 返回建议列表的数据
        clearTimeout(timeout);
        timeout=setTimeout(()=>{
          cb(results);
        },500)
      },
 
      createStateFilter(queryString) {
        return (state) => {
          return (state.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);
        };
      },
删除行操作：
<el-table-column label="操作" width="100">
<template slot-scope="scope">
<el-button type="text" @click.stop="deleteRow(scope.row)">删除</el-button>
</template>
</el-table-column>
 
deleteRow(row) { //删除表格行
var _this = this //调用接口且使用本组件数据的时候要使用_this
// console.log(row)
this.$confirm('确认删除？').then(_ => {
var commitData = {}
commitData = {
bomName: row.bomCode,
bomType: row.assemblyType,
fileName: row.fileName,
level: 'file',
projName: this.productName,
projVersion: this.productVersion,
softNo: row.softwareNo,
userId: this.$store.state.username
};
const deleteRowPath = `${C.paramlibAddr}/api/v1/project/deletefiles`;
AXIOS.post(deleteRowPath, commitData).then(r => {
setTimeout(function () {//调取后台刷新页面，要使用异步
_this.softwaresListData = _this.softwaresListData.filter(item => {
return (item.md5 != row.md5)
});
}, 500)
}).then(r => {
this.$notify({
message: "删除成功",
title: "操作提示",
type: "success",
offset: 100
})
}).catch(e => {
this.$notify.error({
message: "删除失败:" + e,
title: "操作提示",
offset: 100
})
})
}).catch(_ => {
console.log('取消删除')
})
},
 
@click.native.prevent="deleteRow(scope.$index, tableData4)"
 
deleteRow(index, tabledata, row) { //删除表格行，只是表格删除，不调用后台
this.$confirm('确认删除？').then(() => {
tabledata.splice(index, 1)
})
},
loading：
已服务方式调用loading需要异步关闭
指令方式调用与服务方式调用
指令方式调用
<table v-lodaging='loading'>
Data:loading:false
调取数据前
 this.loading = true
调取数据后
_this.loading = false
服务方式调用
<table>
调取数据前
Const loading = this.$loading({
Lock:true,
Text:'loading',
Background:''
})
调取数据后
setTimeout (()=>{
Loading.close()
},500)
 
自定义列内容：插槽
传入template slot-scope="scope"
插槽内可以接受到的参数  { scope.row, scope.column, scope.$index }
 
 
 
<el-table-column label="已有文件" prop="paramId" >
<template slot-scope="scope">
<el-button type="text" 
@click="downloadFileByfileId(scope.$index,scope.row)">{{scope.row.paramId}}
</el-button>
</template>
</el-table-column>
 
 
downloadFileByfileId(index, row) {
let fileId = "";
if (typeof (row.curValue) == 'object') {
fileId = (row.curValue).fileId
} else {
fileId = JSON.parse(row.curValue).fileId
}
const downloadPath = `${C.paramlibAddr}/api/v1/filetrans/downloadfile?fileId=${fileId}`;
window.open(downloadPath);
},
 
单元格编辑功能（行编辑）
 
   
 
几个思路
1 一整行编辑
2 单个单元格编辑
3  表格内容使用input绑定
通过双击进行表格编辑，
给数据添加具有唯一性的selfId根据selfId定位在表格中的index
 
dbclickSequenceRow(row){//双击行进行编辑,                
var taIndex = this.sequenceTableData.findIndex(p => p.selfId === row.selfId)
                this.editSequenceRow(row,taIndex)
            },
 
restoreRow1(index,tabledata,row){//行操作的还原
                //原始数据sequenceData
                var taIndex = this.sequenceData.findIndex(p => p.selfId === row.selfId)
                this.sequenceTableData.splice(index,1,this.sequenceData[taIndex])
            },
 
createEditSequence(formName){//保存创建表
                this.$refs[formName].validate((valid) => {
                    if (valid) {
                        var tempData = this.sequenceForm1
                        tempData.selfId = this.sequenceData.length+1;
                        tempData.addMark = 'true';
                        this.sequenceData.unshift(tempData)
                        this.sequenceTableData.unshift(tempData)
                        this.editSequenceDialogVisible1 = false 
                    } else { 
                        return false;
                    } 
                });
            },
实现行编辑和还原的思路：
1拿到的数据备份为两个
tableData渲染表格
originData应用到还原功能
2编辑行
深复制行数据到表单formData
获取当前行的index
editSequenceRow(row, index){//行操作的编辑
this.sequenceForm1 = {}
this.editSequenceRowInfo = {}
this.editSequenceRowInfo = {
row:row,
index:index
}
this.editSequenceDialogVisible2 = true
var tempData = JSON.parse(JSON.stringify(row))
this.sequenceForm1 = tempData
},
保存编辑表
直接复制数据无法实现表格dom更新
对象使用vue.set替换数据
数组使用splice替换数据，
 
saveEditSequence(formName){//保存行操作编辑表
    this.$refs[formName].validate((valid) => {
if (valid) { 
var tempData = this.sequenceForm1 
this.sequenceTableData.splice(
this.editSequenceRowInfo.index,1,tempData)
this.editSequenceDialogVisible2 = false 
} else { 
console.log('error submit!!'); 
return false; 
} 
});
},
 
还原行操作
原始数据的索引不会更改，表格数据的索引会因为增加或删除导致与原始数据的索引不在对应，
1 在获取数据的时候分别绑定个索引属性
2 在数据字段中找一个不会相同的属性作为行标识
restoreRow1(index,tabledata,row){//行操作的还原
//原始数据sequenceData
this.sequenceTableData.splice(
index,1,this.sequenceData[index])
},
 
 
给编辑的行添加属性
:row-class-name="tableRowClassName"
 
tableRowClassName({row,rowIndex}) {//行单元格属性
if(this.sequenceData[rowIndex]){
let isChange =!this.isObjectValueEqual(row,this.sequenceData[rowIndex]);
return isChange ? 'warning-row' : '' 
}else{
return 'warning-row'
}
},
isObjectValueEqual(a, b) {//比较两个对象是否相同
if(a&&b){//表格数据不是空
var aProps = Object.getOwnPropertyNames(a);
var bProps = Object.getOwnPropertyNames(b);
// console.log(aProps,bProps)
aProps.pop() // 剔除"__ob__"
bProps.pop()
if (aProps.length != bProps.length) {
// console.log('length不同')
return false;
}
for (var i = 0; i < aProps.length; i++) {
var propName = aProps[i];
if (a[propName] !== b[propName]) {
// console.log('value不同,不同项：', propName)
return false;
}
}
return true;
}else{
return true;
}
},
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
获取行索引的几种方式
1 表格遍历添加索引属性,行或单元格classname和style回调的rowIndex
:row-class-name="tableRowClassName"
tableRowClassName ({row, rowIndex}) {
      //把每一行的索引放进row
      row.index = rowIndex;
}
2 表格自定义内容插槽的scope.$index
<el-table-column label="操作">
<template slot-scope="scope">
<el-button type="text" 
@click.stop="editSequenceRow(scope.row,scope.$index)">编辑</el-button>
</template>
</el-table-column>
3单击双击行如何获取索引，单击双击行触发操作的click事件
 
表格行单击触发一种事件，即使没有定义行单击事件
 
表格行操作导致的多选重置问题：
      // this.tableData.push({a:'a3',b:'b3'})//存在的不会丢失选择
      // this.tableData.splice(index,1,{a:'ax',b:'bx'})//更改的丢失选择
      // this.tableData=this.tableData.slice(index)//会全部丢失选择
      // this.tableData = this.tableData//不会丢失选择
      // this.tableData = [ //全部会丢失选择
      //   {a:'a1',b:'b1'},
      //   {a:'a2',b:'b2'},
      //   {a:'ax',b:'bx'},
      // ]
      // data.push({a:'a3',b:'b3'})//存在的不会丢失选择
      //不更改表数组引用地址，没改变的表格内容不会发生重绘（push，splice）
      //更改数组引用，表格重绘（重新另外赋值，slice）
 
根据数据获取表格行记录索引
var taIndex = this.tableData.findIndex(p => p.prop === value)
检测记录部分key是否重复
var raindex = this.tableData.findIndex(item=>{
return (item.ateName.trim().toLowerCase() === this.ateName.trim().toLowerCase() && item.projectName.trim().toLowerCase() === this.projectName.trim().toLowerCase())
})
var ishas = this.tableData.some((item)=>{
return (item.ateName.trim().toLowerCase() === this.ateName.trim().toLowerCase() && item.projectName.trim().toLowerCase() === this.projectName.trim().toLowerCase())
})
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
form
在form中按钮会提交表单，导致页面刷新
2018年11月5日
15:28
 
submitForm(formName) { //提交表单操作
                this.$refs[formName].validate((valid) => {
                    if (valid) {
 
                    } else {
                        return false;
                    }
                });
            },
 
 
表单验证
自定义校验： prop="toTEs" 数组校验   
正常校验表单项都需绑定到form数据，表单项不绑定form数据的校验可以通过js判断去实现，如上传文件  return false
<el-form :model='formData' :rules="formRules"
<el-form-item label="活动名称" prop="name">
                   <el-input v-model="formData.name"></el-input>
          </el-form-item>
 
formRules: {
    name: [
{type: 'string',required: true,message: '添加name',trigger: 'change'},
{ required: true, message: '请输入活动名称', trigger: 'blur' },
    ]
},
 
通过 rules 属性传入约定的验证规则，并将 Form-Item 的 prop 属性设置为需校验的字段名即可
 
<el-form :model="ruleForm" :rules="rules" ref="formName" status-icon
 
<el-form-item label="活动名称" prop="name"> <el-input v-model="ruleForm.name"></el-input> </el-form-item>
 
<el-form-item label="活动时间" required> 
<el-form-item prop="date1"> 
<el-date-picker type="date" placeholder="选择日期" v-model="ruleForm.date1" style="width: 100%;"></el-date-picker> 
</el-form-item> 
<el-form-item prop="date2"> 
<el-time-picker type="fixed-time" placeholder="选择时间" v-model="ruleForm.date2" style="width: 100%;"></el-time-picker> 
</el-form-item> 
</el-form-item>
<el-form-item> 
<el-button type="primary" @click="submitForm('formName')">立即创建</el-button> 
<el-button @click="resetForm('formName')">重置</el-button> 
</el-form-item>
 
 
 
 
El-form绑定:model和:rules属性
v-model绑定到el-form-item内的控件
prop绑定到el-form-item上
一个表单项可以包含多个子表单项，prop绑定到子表单项，
status-icon属性为输入框添加了表示校验结果的反馈图标
 
 
 
 
data() { return { 
ruleForm: { name: '', region: '', date1: '', date2: '', delivery: false, type: [], resource: '', desc: '' }, 
rules: { name: [ { required: true, message: '请输入活动名称', trigger: 'blur' }, { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' } ],
 
 
submitForm(formName) { //提交
this.$refs[formName].validate((valid) => {
if (valid) { 
alert('submit!'); 
} else { 
console.log('error submit!!'); 
return false; 
} 
}); 
}, 
resetForm(formName) { //重置
this.$refs[formName].resetFields(); 
}
 
自定义校验
var checkAge = (rule, value, callback) => { 
if (!value) { return callback(new Error('年龄不能为空')); } 
setTimeout(() => { 
if (!Number.isInteger(value)) { 
callback(new Error('请输入数字值'));
} else {
if (value < 18) { 
callback(new Error('必须年满18岁')); 
} else { 
callback(); //验证通过后这行不能少
} 
} 
}, 1000); 
};
 
rules2: { pass: [ { validator: checkAge , trigger: 'blur' } ],
 
submitForm(formName) { 
this.$refs[formName].validate((valid) => { 
if (valid) { alert('submit!'); 
} else { 
console.log('error submit!!'); return false; 
} 
}); 
},
 
 
<el-form-item prop="email" label="邮箱" 
:rules="[ { required: true, message: '请输入邮箱地址', trigger: 'blur' }, 
{ type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] } ]" > 
<el-input v-model="dynamicValidateForm.email"></el-input> 
</el-form-item>
 
 
 
<el-form-item v-for="(domain, index) in dynamicValidateForm.domains" :label="'域名' + index" :key="domain.key" 
:prop="'domains.' + index + '.value'" 
:rules="{ required: true, message: '域名不能为空', trigger: 'blur' }" > 
<el-input v-model="domain.value"></el-input>
<el-button @click.prevent="removeDomain(domain)">删除</el-button> 
</el-form-item>
 
<el-form-item> 
<el-button type="primary" @click="submitForm('dynamicValidateForm')">提交</el-button> 
<el-button @click="addDomain">新增域名</el-button> 
<el-button @click="resetForm('dynamicValidateForm')">重置</el-button> 
</el-form-item>
 
 
 
 
removeDomain(item) { 
var index = this.dynamicValidateForm.domains.indexOf(item) 
if (index !== -1) { 
this.dynamicValidateForm.domains.splice(index, 1) 
} 
}, 
addDomain() { 
this.dynamicValidateForm.domains.push(
{ value: '', key: Date.now() }
); 
}
 
动态增减表单项
 
 
<el-form-item v-for="(item,key) in rulesContent.enum" 
:label="'选项' + key" :key="key">
<el-input style="width: inherit;" :ref="'enum' + key" 
v-model="rulesContent.enum[key]" autofocus></el-input>
<el-button @click.prevent="removeDate(item,key)">删除</el-button>
</el-form-item>
 
removeDate: function (item, key) {
this.rulesContent.enum.splice(key, 1)
},
 
 
addDate: function () {
if (!this.rulesContent.enum) {
Vue.set(this.rulesContent, 'enum', []);
this.rulesContent.enum.push("");
this.enumList = this.rulesContent.enum;
} else { //删除元素后有数组但数组长度为0的走向问题
if (this.rulesContent.enum.length == 0) {
this.rulesContent.enum.push("");
this.enumList = this.rulesContent.enum;
} else {
if (this.rulesContent.enum[this.rulesContent.enum.length - 1]) {
this.rulesContent.enum.push("");
this.enumList = this.rulesContent.enum;
} else {
this.$notify({
title: '警告',
message: '域名不能为空',
type: 'warning',
position: 'bottom-right'
})
}
}
}
var ref = "enum" + (this.rulesContent.enum.length - 1);
this.$nextTick(() => {
// console.log('refs', this.$refs[ref])
this.$refs[ref][0].focus();
})
},
表单验证失败提示语被遮挡问题                        
有验证提示没有撑开表单，原因默认的提示语position：absolute 
自定义样式
.el-form-item__error{
    position:relative;
}
 
使用store验证字段的唯一性
<form :rules="$store.getters.ruleList"
state:{
   SequenceTableData:[]
}
getters: {
    // Getter 接受 state 作为其第一个参数：
   ruleList: state => {
   let jsonDate = state.paramValues;
   var rules = state.rules;
   var regEn = /[`~!@#$%^&*()+<>?:"{},.\/;'[\]]/im; //不允许特殊字符
   var regCn = /[·！#￥（——）：；“”‘、，|《。》？、【】[\]]/im; //不允许特殊字符
   var regEn2 = /[`~!@#$%^&*()+<>?:"{},\/;'[\]]/im;//不允许特殊字符
   rules.testName = [
      {
         validator:function(rule,value,callback){
             if(!value){
                callback(new Error('请输入测试项名'))
             }
             var flag = state.SequenceTableData.some((item)=>{
                 return item.testName == value
             })
             if(flag){
                 callback(new Error('测试项名不能重复'))
             }else{
                 callback()
             }
          },
          trigger:'blur',
          required:true
       }
    ];
    rules.testEnable = [
       {required: true, message: '请选择使能', trigger: 'blur' }
    ];
 
    rules.paramId2 = [
        { 
           validator:function(rule,value,callback){
              if(!value){
                 callback(new Error('请输入指标名称'))
              }else if (!(/^[a-zA-Z]+/).test(value)) {
                 callback(new Error('请以英文字母开头'))
              } else if (regEn.test(value) || regCn.test(value)) {
                 callback(new Error('不允许包含特殊字符'))
              }else {
                 callback()
              };
            },
            trigger: 'blur',
            required: true
          }
    ];
    return rules;
},
mutations:{
    changeSequenceTableData(state,val){
        state.SequenceTableData = val;
    }
}
 
 
组件中传递最新的SequenceTableData
var commitData = JSON.parse(JSON.stringify(this.sequenceTableData))
commitData.splice(index,1)
this.$store.commit('changeSequenceTableData',commitData);//验证唯一性剔除自身
在data函数中定义验证函数
在return中返回规则
在验证函数内需要使用到return的数据的时候处理方法;
在data的return中使用this.data数据为undefined
改用store传递验证
 
在单个表单项上传递属性的验证规则
单个表单项为什么验证失败的问题，未解决，使用全表单验证替换，同样遇到同样的问题
在表单项的绑定值要使用form对象里值 form.projectName
 
由于更改绑定值导致监听失败的处理：
使用computed中间层，要添加get和set
computed:{
projectName:{
get(){
return this.form.projectName
},
set(){
}
},
然后监听projectName
表单提交后置空，或者打开表单框的时候置空
This.form = {}
Computed property "route" was assigned to but it has no setter
 
一个计算属性，如果没有设置 setter,也就是传入的是一个函数，或者传入的对象里没有 set 属性，当你尝试直接该改变这个这个计算属性的值，比如在methods方法里面有对这个计算属性赋值的操作
都会报这个错误。
所以要给计算属性添加空set
 
表单回车提交
<el-button type="primary" @click="onSubmit" round :loading="isloading" native-type="submit">登录</el-button>
 
 
 
form-item中的input宽度问题？
input默认width100%；如果form使用inline则按照el-form-item__content的宽度一般为207.44，所以最好在表单
 
里面自定义input的宽度
 
 
 
复选框
2018年11月9日
11:18
 
<span class="title">涉及Bom</span>
<el-checkbox-group v-model="checkBomList" @change="handleCheckedBomChange">
<el-checkbox v-for='item in systemData0.relateBomArr' :label="item"><span class="checkboxItem">{{item}}</span></el-checkbox>
</el-checkbox-group>
<span class="checkAllBom">
<span class="directive">如果驳回，请选择对应的bom</span>
<el-checkbox v-show="true" :indeterminate="isIndeterminate" v-model="checkAllBom" @change="handleCheckAllChange"><span class="checkboxItem">全选</span></el-checkbox>
</span>
handleCheckedBomChange(value){
console.log(value)//
let checkedCount = value.length;
this.checkAllBom = (checkedCount === this.systemData0.relateBomArr.length);
this.isIndeterminate = (checkedCount > 0 && checkedCount < this.systemData0.relateBomArr.length);
},
handleCheckAllChange(value){
this.checkBomList = value ? this.systemData0.relateBomArr : [];
this.isIndeterminate = false;
},
 
<el-dropdown style="float:right">
<el-button type="primary">显示列
<i class="el-icon-arrow-down el-icon--right"></i>
</el-button>
<el-dropdown-menu slot="dropdown">
<el-checkbox-group @change="handleCheckeColumnChange" 
v-model="extendColumns2">
<el-checkbox style="display:block;margin-left:20px" v-for="extendColumn in extendColumns1" 
:label="extendColumn" v-model="extendColumn.isShow">{{extendColumn.name}}</el-checkbox>
</el-checkbox-group>
<el-checkbox label="全选" v-model="extendColumnShowAll" @change="handleCheckAll"></el-checkbox>
</el-dropdown-menu>
</el-dropdown>
handleCheckAll(value){//显示列全选
this.extendColumns2 = value ? this.extendColumns1: [];
this.extendColumns1.forEach((item)=>{
item.isShow = value
})
},
handleCheckeColumnChange(value){//显示列group单选
console.log(value)
this.extendColumns1.forEach((item)=>{
item.isShow = false
})
value.forEach((item)=>{
item.isShow = true
})
let checkedCount = value.length;
this.extendColumnShowAll = (checkedCount === this.extendColumns1.length);
},
// handleCheckeColumnChange1(value){//显示列checkbox单选
// console.log(value)
// },
//在checkbox 上的切换value为true和false，
//在group上的切换value为的选中项目label组成的数组即v-model绑定的数组
//更改这个v-mode的数据会影响到原来的数据
 
 
1在不使用group的时候checkbox绑定的值为true和false，切换事件的value为true
2使用group的时候，group绑定的值为选中checkbox中label传递的数据组成的数组，也是切换事件的value
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
提示框
2018年11月13日
14:53
 
this.$confirm('确认删除？').then(()=>{
fn（）
}).catch(()=>{
console.log('取消删除')
})
删除切换等容易误操作的按钮都可以使用这个确认框
this.$confirm('确认删除?', '提示', {
confirmButtonText: '确定',
cancelButtonText: '取消',
type: 'warning'
}).then(() => {
this.delete();
}).catch(() => {})
 
 
 
•	$msgbox(options)
•	$alert(message, title, options) 或 $alert(message, options)
•	$confirm(message, title, options) 或 $confirm(message, options)
•	$prompt(message, title, options) 或 $prompt(message, options)
 
searchEquipOp.updateAteProject(subItem).then(re=>{
                    this.$notify({
    message: "添加成功",
    title: "操作提示",
    type: "success",
    offset: 100
})
                }).catch(er=>{
                    this.$notify({
 message: "添加失败:" + e,
                        title: "操作提示",
                        type:'error',  //success/warning/info/error
 offset: 100
       })
                })
this.$alert('你没有删除指标的权限', '警告', {
confirmButtonText: '确定',
type: 'warning',
callback: action => {}
});
 
 
this.$alert('这是一段内容', '标题名称', { 
confirmButtonText: '确定', 
callback: action => { 
this.$message({ 
type: 'info',
message: `action: ${ action }` }); }
 
 
$msgbox(options)
$alert(message, title, options) 或 $alert(message, options)
$confirm(message, title, options) 或 $confirm(message, options)
$prompt(message, title, options) 或 $prompt(message, options)
 
把notify改为message不会出现多个框子
 
this.$message('这是一条消息提示');
this.$message({
   message: '这是一条带有提示类型的消息',
   type: 'success'  //success/warning/info/error
});
 
 
this.$message.warning(`当前未选择文件`);  
会在一个位置跳动
 
success/warning/info/error
 
 
 
 
 
 
手动关闭message
This.$message.closeAll()
或者
Var m = this.$message()
m.close();
重复提示框处理：1实现抖动，2无法再次点击    
实现抖动：
var _this = this
                    if(this.haveNotify){
                        var dom = document.getElementsByClassName('notifyClass')[0]
                        dom.style.border="1px solid black"
                        setTimeout(function(){
                            dom.style.border="none"
                        },100)
                    }else{
                        this.$notify({
                            title: "提示",
                            "message": "您尚未选择数据，请先选择数据再点击删除",
                            type:'warning',
                            offset: 100,
                            duration:_this.time,
                            customClass:"notifyClass"
                        })
                        this.haveNotify = true;
                        setTimeout(function(){
                            _this.haveNotify = false;
                        },_this.time)
                    }
                }
 
 
dropdown
2018年11月15日
10:50
使用下拉菜单显示列
1 定义下拉菜单
2定义table隐藏项目
必须要使用v-if？
3定义下拉菜单数组
<el-dropdown>
<el-button type="primary" round>显示列
<i class="el-icon-arrow-down el-icon--right"></i>
</el-button>
<el-dropdown-menu slot="dropdown">
<ul style="width:160px">
<li v-for="extendColumn in extendColumns1" >
<el-checkbox :label="extendColumn.name" v-model="extendColumn.isShow"></el-checkbox>
</li>
</ul> 
</el-dropdown-menu>
</el-dropdown>
 
<el-table-column property="" label="所属测试用例D1" v-if="extendColumns1[0].isShow"></el-table-column>
<el-table-column property="" label="跳转1" v-if="extendColumns1[1].isShow"></el-table-column>
 
extendColumns1:[{name:"所属测试用例D1",isShow:false},{name:"跳转1",isShow:false}],
 
 
dialog
2018年11月16日
11:55
 
内外层嵌套，内层添加append-to-body属性
append-to-body属性
<el-dialog title="外层 dialog" :visible.sync="outerVisible"> 
外层内容
<el-dialog width="30%" title="内层 Dialog" :visible.sync="innerVisible" append-to-body>
内层内容
 </el-dialog> 
<div slot="footer" class="dialog-footer"> 
<el-button @click="outerVisible = false">取 消</el-button> 
<el-button type="primary" @click="innerVisible = true">打开内层 Dialog</el-button> 
</div>
 </el-dialog>
 
dialog内body设置：
:custom-class="isFullscreen?'dialogFullscreen':'dialognotFullscreen'"
:fullscreen="isFullscreen"
.dialognotFullscreen .el-dialog__body{
    max-height:70%;
    padding:0 20px;
}
.dialogFullscreen .el-dialog__body{
    max-height:85%;
    padding:0 20px;
}
通过dialog打开子组件注意事项：
打开dialog后获取里面的元素使用nextTick
this.$nextTick(()=>{
this.bpmnDiagramContainer = this.$refs.svg;
this.bpmnDiagramContainer.innerHTML = ''
// console.log(this.bpmnDiagramContainer)
})
 
<el-dialog title="子组件标题" :visible.sync="childvisible" @open="openDialog">
   <full-system ref="fullSystem" :systemData='systemData' ></full-system>
 </el-dialog>
1点击父组件的事件 fn1(){this.childvisible = true}
2dialog打开的事件openDialog(){this.$nextTick(()=>{this.$refs.childComponent.init()})
ref 区分大小写，调用打开的dialog组件元素要使用nextTick
3向子组件传值：子组件props:{systemData:Array},
 
 
tab
2018年11月22日
16:05
 
 
<template>
  <el-tabs v-model="activeName" @tab-click="handleClick">
    <el-tab-pane label="用户管理" name="first">用户管理</el-tab-pane>
    <el-tab-pane label="配置管理" name="second">配置管理</el-tab-pane>
    <el-tab-pane label="角色管理" name="third">角色管理</el-tab-pane>
    <el-tab-pane label="定时任务补偿" name="fourth">定时任务补偿</el-tab-pane>
  </el-tabs>
</template>
<script>
  export default {
    data() {
      return {
        activeName: 'second'
      };
    },
    methods: {
      handleClick(tab, event) {
        console.log(tab, event);
      }
    }
  };
</script>
 
 
 
 
分页
2018年11月29日
16:22
 
<div class="pagination-wrapper ">
                <el-pagination
                    @size-change="handleSizeChange"  
                    @current-change="handleCurrentChange"
                    @prev-click="prevClick"
                    @next-click="nextClick"
                    :current-page="currentPage"
                    :page-sizes="[10, 20, 30, 40]"
                    :page-size="pageSize"
                    layout="total, sizes, prev, pager, next, jumper"
                    :total="pageTotal">
                </el-pagination>
 </div>
 
computed:{//计算属性slice表格显示数据
    tableData1:{
                get(){
                    var start = (this.currentPage-1)*this.pageSize
                    var length = this.pageSize
                    var end = this.currentPage * this.pageSize
                    return this.tableData.slice(start,end)
                },
                set(){
                    
                }
            }
 
  handleSizeChange(val){//分页更改显示条数
                // console.log(val)
                this.pageSize = val
            },
            handleCurrentChange(val){//分页更改当前页码
                // console.log(val)
                this.currentPage = val
            },
            prevClick(val){//分页前一页会触发handleCurrentChange不需要写这个
                this.currentPage = val
            },
            nextClick(val){//分页后一页会触发handleCurrentChange
                this.currentPage = val
            },
 
 
树
2018年12月11日
16:33
 
使用 scoped slot 会传入两个参数node和data，分别表示当前节点的 Node 对象和当前节点的数据
 
<el-tree
      :data="data5"
      show-checkbox
      node-key="id"
      default-expand-all
      :expand-on-click-node="false">
      <span class="custom-tree-node" slot-scope="{ node, data }">
        <span>{{ node.label }}</span>
        <span>
          <el-button
            type="text"
            size="mini"
            @click="() => append(data)">
            Append
          </el-button>
          <el-button
            type="text"
            size="mini"
            @click="() => remove(node, data)">
            Delete
          </el-button>
        </span>
      </span>
    </el-tree>
 
this.$parent.$refs.tree_pro.level==5
<my-tree level=5 @node-click="handleNodeClick" ref="tree_pro" />
参数库level为3
 
#side-tree .el-tree-node>.el-tree-node__children {
        overflow: visible /*必须加这个才有横向滚动*/
    }
 
 
Select和input
2018年12月20日
18:30
 
多选情况下，下拉无法自动关闭问题
 
 
select 的v-model如果绑定的是对象，在option中value绑定的item必须要有value属性否则出错
多选情况下，绑定值为数组 ，改变绑定值过程中要确保绑定数据的值类型始终是数组
 
可以使用对象合并：
Object.assign(this.formEdit2A, r.data)
set是重新设置会导致组件错误
Vue.set(this.formEdit2A, "permitroles", []);
//select模糊搜索转审用户名
<el-select v-model="formEdit6.transmiter" filterable remote size="small" style="width:200px"  placeholder="搜索用户" :remote-method="remoteMethod" :loading="loading3">
 <el-option v-for="item in userNameSearchArr" :key="item.account" 
:label="item.title" :value="item.account"> </el-option>
 </el-select>
         
 
   remoteMethod(query){
                if(query !==""){
                    this.loading3 = true
                    setTimeout(()=>{
                        UserRightOp.getAllUsersList(query).then(re => {
                            this.userNameSearchArr = re.data.filter(item=>{
                                let str = item.account + ',' + item.givenName + ',' +  item.dept + ',' + item.title
                                return str.toLowerCase().indexOf(query.toLowerCase()) > -1
        // return (i.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);
                            })
                            this.loading3 = false
                        })
                    },100)
                }else{
                    this.userNameSearchArr = []
                }
            },
 
 
//input模糊搜索转审用户名
<el-autocomplete v-model="formEdit6.transmiter" :fetch-suggestions="userNameSearch" placeholder="请输入用户名" :trigger-on-focus="false"  @select="userNameSelect" style='width:200px'></el-autocomplete>
 
 userNameSearch(queryString,cb){                
if(queryString){
                    let time = null
                    UserRightOp.getAllUsersList(queryString).then(re => {
                        this.userNameSearchArr = re.data
                        let userIdArr = [];
                        this.userNameSearchArr.forEach(item=>{
                            userIdArr.push({
                                value:item.account + ',' + item.givenName + ',' +  item.dept + ',' + item.title,
                                // value:item.account,//value属性下拉选择及选中显示字段
                            })
                        })
                        let suggestUser = userIdArr.filter(i=>{
                            return (i.value.toLowerCase().indexOf(queryString.toLowerCase()) >-1)
                        })
                        clearTimeout(time)
                        time = setTimeout(()=>{
                            cb(suggestUser)
                        },100)
                    })
                }
            },
            userNameSelect(event){
                let str = event.value
                let index1 = str.indexOf(',')
                this.formEdit6.transmiter = str.slice(0,index1)
            },
 
 
 
 
 
 
this.dialogLoading = this.$loading({
          lock: true,
          text: 'Loading',
          spinner: 'el-icon-loading',
          background: 'rgba(0, 0, 0, 0.7)'
        });
        
this.dialogLoading.close();
 
 
 
上传文件
2018年12月24日
9:32
 
 
按钮标签开关
2018年12月27日
16:29
 
按钮提示
 
<el-tooltip class="item" effect="dark" :content="'存在未保存参数项，无法切换'+selectType" placement="top" :disabled="paramCommit.length<=0">
        <el-select id='select-bom' placeholder="选择BOM" v-model="product_id" :disabled="paramCommit.length>0" style='width:200px;margin-right:10px;'>
            <el-option v-for="item of product_id_array" :value="item.text" :label="item.text" />
        </el-select>
</el-tooltip>
 
<el-tooltip effect="dark" content="提示信息" placement="top">
<div>内容</div>
</el-tooltip>
 
开关
<el-switch
  style="display: block"
  v-model="value"
  active-color="#13ce66"
  inactive-color="#ff4949"
  active-text="按月付费"
  inactive-text="按年付费"
  active-value="100"
  inactive-value="0"
  @change="changeSelectType"        >
</el-switch>
 
 
input
2019年3月29日
10:47
 
模糊搜索
<el-autocomplete v-model="searchKeys.searchGroup" placeholder="群组" style="width:150px" size="small"
        :fetch-suggestions="fetchSuggestions" :trigger-on-focus="false"></el-autocomplete>
 
 
projectSearch(queryString, cb) {
 console.log('获取建议列表')//值发生变化就发生一次，queryString是绑定值，如input事件, 要在这之前拿到建议全数组
    fetchSuggestions(queryString,cb){//模糊搜索工程
      if(queryString){
        projectBaseInfoOp.getProjects(queryString).then(re=>{
          let projectArrays = []
          re.data.forEach(item=>{
            projectArrays.push({
              "value":item
            })
          })
          let suggestGroups = projectArrays.filter(i=>{
            return (i.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);
          })
          clearTimeout(this.timeout);
          this.timeout = setTimeout(() => {
            cb(suggestGroups);
          }, 500)
        })
      }
    },
 
