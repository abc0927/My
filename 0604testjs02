 
 
 
语法
2018年11月23日
18:19
 
switch(n)
{
case 1:
  执行代码块 1
  break;
case 2:
  执行代码块 2
  break;
default:
  n 与 case 1 和 case 2 不同时执行的代码 或者直接break
}
 
 
 
判定数据类型
Typeof value == 'object'
 
块级元素宽度是继承
内联元素宽度是撑开
内联块级元素宽度宽度是撑开
 
高度是先看是否有定义，然后看是否撑开，高度使用百分比继承；
 
运算符前后都需要保留一个空格，例如：width: calc(100% - 10px)；
blur与点击事件冲突处理：
blur事件比click事件先触发;blur和focus事件不会冒泡;click事件会产生冒泡
1、给blur失去焦点事件添加延迟事件，让blur事件在click事件后执行，延迟事件不在可控范围
2、将click事件改为mousedown事件，mousedown事件是优先于blur事件执行，验证失败
3、保留click，给图标再添加一个mousedown事件，在其中执行event.preventDefault()阻止浏览器默认事件，这样点击按钮时输入框就不会失去焦点了，验证失败
4、动态绑定blur事件，当鼠标进入input框父级元素时，移除input绑定事件blur，当鼠标移出输入框父级元素时，给input绑定blur事件，这个比较靠谱
@mouseenter="inputmouseenter" @mouseleave="inputmouseleave"
@blur.stop="!inputmouseisenter?NodeBlur(node, data):null"
 
 
异步
2018年12月21日
10:50
 
Promise是一个构造函数,自己有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法
new了一个Promise，并没有调用它，但是传进去的函数就已经执行了，这是需要注意的一个细节。所以我们用Promise的时候一般是包在一个函数中return出promise对象，在需要的时候去运行这个函数，Promise对象上有then、catch方法
应用：把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方式执行回调函数
Resolve,reject方法传递的是回调参数 resolve('成功回调数据') reject('失败回调数据')
then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调
catch方法接受一个参数
1用来指定reject的回调，
2在执行resolve的回调时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中，如果不用Promise，代码运行到错误直接在控制台报错，不再往下运行了，但是在promise中会继续往下运行
promise.all方法并行执行多个异步，谁跑的慢以谁为准执行回调，参数为所有异步的promise对象
Promise.race方法并行执行多个异步谁跑的快以谁为准，执行快的回调，慢的回调不执行，但是异步函数内部还是正常执行，应用：拦截比较慢的异步回调
 
        var p = Promise.resolve("传递数据")//promise对象
        p.then(re=>{
            console.log('promise异步' + re)
        })
        console.log('同步')
 
 
Function p (){
        var p1 = new Promise(function(resolve,reject){
            console.log('执行promise');
            setTimeout(()=>{
                console.log('执行timeout')
                // resolve('成功回调数据2')//放到异步内执行回调
            },0)
            resolve('成功回调数据1')//放到异步外执行回调
            // reject("失败回调数据")
        }).then((re)=>{//没有reject不会执行catch,有了reject后会执行catch后面的then，不会执行catch前面的then
            console.log(re)
            return '直接返回的数据' //或者是其他异步返回promise对象
        }).then((re)=>{
            console.log(re)//直接返回的数据
        })
 
        p1.then((re)=>{//外层回调
            console.log('外层then' + re)
        })
        p1.catch((er)=>{
            console.log('外层catch' + er)
        })
Return p1;
}
p();
 
Promise.race
 
        function p1 (){
            var p11 = new Promise(function(resolve,reject){
                setTimeout(()=>{
                    console.log('1m后执行')
                    resolve("1m成功回调")
                },1000)
            })
            return p11
        }
        function p2 (){
            var p21 = new Promise(function(resolve,reject){
                setTimeout(()=>{
                    console.log('2m后执行')
                    reject("2m失败回调")
                },2000)
            })
            return p21
        }
        Promise.race([p1(),p2()]).then(re=>{
            console.log(re)
        }).catch(er=>{
            console.log(er)
        })
 
回调函数：
function runAsync(callback){
    setTimeout(function(){
        console.log('执行1');
            if(typeof callback == 'function'){
                callback(data)// 传递给回调函数参数
            }else{
                console.log(callback)
            }
    }, 2000);
}
 
runAsync(function(data){//定义回调函数
    console.log('执行2');
});
执行顺序：1 => 2
 
 
 
Promse.all在处理多个异步处理时非常有用，比如说一个页面上需要等两个或多个ajax的数据回来以后才正常显示，在此之前只显示loading图标
Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，
 
即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。
 
 
 
批量异步执行后执行对应操作：
 
Promise.all(
                        this.multipleSelection.map((item,index)=>{//使用map进行返回异步
                            let result = ParamLibOp.affectedParamSet(item.tableId)//异步操作
                            return result; //必须有return异步
                        })
                    ).then(s=>{//所有异步返回对象组成的数组
                        s.forEach((re,index)=>{//每个异步的返回数据
                            // this.delLinkData2.push(...re.data)
                            re.data.forEach(item=>{//返回数组中的每个数据
                                this.delLinkData2.push(item)
                            })
                        })
                        this.delLinkData2.sort(this.comparator('paramId',this.comparator('projectName')))
                        this.delLinkDataVisible2 = true//在批量异步后执行
                    })
获取异步请求的数据： index 是互相对应的，可以通过.then 下的index获取发请求的对应入参
 
 
Promise.all([p1, p2]).then((result) => {
  console.log(result)       
}).catch((error) => {
  console.log(error)
})
 
 
在异步函数执行后执行操作：
delParam(id){//异步函数，需要返回异步响应
                let re = ParamLibOp.deleteParamLib(id).then(re=>{
                    console.log('异步函数执行')
                    this.$message('删除成功')
                }).catch(er=>{
                    this.$message('删除失败')
                })
                return re
}
this.delParam(id).then(()=>{
//异步函数后执行的操作
})
 
 
 
异步函数a内有异步函数b，如何等异步函数a和b执行完后执行c，执行顺序a=>b=>c
 
 
function fn1(){
    let asyfn1 = 异步操作1.then(()=>{
        执行操作1
        let asyfn2 = 异步操作1内的异步操作2.then(()=>{
            执行的操作2
        })
        return asyfn2;
    })
    return asyfn1;
}
function fn2(){
    执行操作31
    let asyfn3 = 异步操作3.then(()=>{
        执行操作32
    })
}
fn1.then(()=>{
    执行操作3
    return fn2()
}).then(()=>{
    执行操作4
})
 
执行顺序：1=>2 =>3 =>31=> 32=> 4  
(2和3的顺序怎么保证的？) 
内层异步是否执行如果无法保证，就把内层的异步拿出来使用链式操作
 
 
 
 
this.getxmlfilePath().then(()=>{//异步链式操作
                            return this.createNewDiagram()
                        }).then(()=>{
                            console.log('生成预览后保存')
                            this.submitSequence2()
                        })
 
 
 
三个异步函数独立，执行顺序为a=>b=>c
注意：异步函数abc要最后返回了一个Promise对象，只有promise才有then方法，所以在链式调用中间要添加return
1、链式调用
a()
  .then(function (data) {
    return b(data)//使用return返回Promise对象调用then方法
  })
  .then(function (data) {
    return c(data)
  })
  .then(function (data) {
    console.log(data)// abc
  })
2、构建队列方法
特点：封装方法，可移植到别处使用
// 构建队列函数
 function queue(arr) {
  var sequence = Promise.resolve()
  arr.forEach(function (item) {
    sequence = sequence.then(item)
  })
  return sequence
}
// 执行队列
queue([a, b, c])
  .then(data => {
    console.log(data)// abc
  })
3、使用async 和 await
async function queue(arr) {
  let res = null
  for (let promise of arr) {
    res = await promise(res)
  }
  return await res
}
queue([a, b, c])
  .then(data => {
    console.log(data)// abc
  })
 
 
 
 
执行顺序：同步 > 异步 > 回调 
 
for (var i = 0; i <= 5; i++) {
                setTimeout(function() {
                    console.log( i );
                }, i*1000);
                console.log( ' i : ' , i );
            }
            console.log( i );  
 
 
for 内部console => for外部 console => setTimeout内部 console
for循环和外层的 console.log()是同步的，setTimeout是回调执行
 
var p = new Promise(
                function (resolve,reject){
                    console.log(1) //同步
                    setTimeout(()=>{//回调
                        console.log(3)
                    })
                    resolve(true)//执行同意的21
                    reject(true) //执行拒绝的22
                }
            )
            p.then(()=>{ //异步
                console.log(21)
            })
            p.catch(()=>{ //异步
                console.log(22)
            })
 
执行结果：1 21 3
 
let p = new Promise(function(resolve,reject){
                            _this.creatPreview()
                            resolve(true)
                        })
                        p.then(()=>{
                            setTimeout(()=>{
                                _this.submitSequence2()
                            },1000)
                        })
 
var b = new Promise(
                function() {
                    console.log(5)
                    setTimeout(() => console.log(6), 0)
                }
            )
不用then和catch，可以不给resolve,reject参数
 
 
 
async：
async 函数的实际返回值总是一个 Promise 对象
如果函数中有返回值 ,会调用Promise.resolve()返回一个promise对象，函数返回值为resolve方法的参数，只执行then回调
如果函数内部抛出错误，会调用Promise.reject() 返回一个promise对象，只执行catch回调，但是会执行catch后面的then回调
 
        async function  p(flag){
            if(flag){
                setTimeout(()=>{
                    console.log('异步执行1')
                },1000)
                // return '强制异步数据'
            }else{
                throw '抛出错误'
            }
            return '强制异步数据'
        }
        //async函数执行返回promise对象，将同步转换为异步
        p(true).then(re=>{
            console.log(re)
        })
        p(false).then(re=>{
            console.log(re)
        }).catch(er=>{
            console.log(er)
        })
        console.log('同步执行')
 
await 按顺序控制异步操作
只能放到async 函数里面，await后面接
大多放一个返回promise对象的表达式：使得异步代码就像同步代码一样按顺序执行，阻塞async主函数的执行
promise对象为resolve ：返回的promise对象调用对应回调函数执行完后，再向下走，
promise对象为rejected：返回的promise对象调用对应回调函数执行完后，不再向下走，终止主函数执行
对于非Promise对象，await等待函数或者直接量的返回，而不是等待其执行结果
await不影响后面代码的返回值，如果是函数返回函数的返回内容，如果是promise返回promise的返回内容，如果是变量返回变量
 
        function p1() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    console.log("异步执行1")
                    // resolve("异步数据1")
                    reject("异步数据1")
                },2000)
            })
        }
        function p2() {
            setTimeout(() => {
                console.log("异步执行21")
            },1000)
            console.log('异步执行20')
        }
        function p11(){
            p1().then(re=>{
                console.log(re)
            })
        }
        async function p0() {
            let result0 = await "等待数据0"
            let result1 = await p1() //await后接promise对象，异步强制按同步执行，如果是reject会终止向下执行
            let result2 = await p2()//await后接非promise对象，只等待函数或直接量的返回而不是等待执行结果
            // let result3 = await p11() //await后接非promise对象            console.log("异步执行0", result0, result1, result2)
            return "async数据"
        }
        p0().then(re=>{
            console.log(re)
        }).catch(er=>{//如果执行的reject会终止async函数的执行
            console.log(er)
        })
        console.log('同步执行')
 
 
正则
2019年2月18日
18:57
 
## ^ 匹配字符串的开始。
## $ 匹配字符串的结尾。
## \b 匹配一个单词的边界。
## \d 匹配任意数字。
## \D 匹配任意非数字字符。
## x? 匹配一个可选的 x 字符 (换言之，它匹配 1 次或者 0 次 x 字符)。
## x* 匹配0次或者多次 x 字符。
## x+ 匹配1次或者多次 x 字符。
## x{n,m} 匹配 x 字符，至少 n 次，至多 m 次。
## (a|b|c) 要么匹配 a，要么匹配 b，要么匹配 c。
## (x) 一般情况下表示一个记忆组 (remembered group)。你可以利用 re.search 函数返回对象的 groups() 函数获取它的值。
## 正则表达式中的点号通常意味着 “匹配任意单字符”
语法：/正则表达式主体/修饰符  i不区分大小写 g全局匹配 m多行匹配
正则不写/g，默认查找符合的第一个子字符串就跳出
 
字符串方法（search()、replace()、match()、split()）
search()方法，用于检索指定字符串的子字符串，并返回子字符串的起始位置。第一位是0  str.search(/search/i)
replace()方法，用在字符串中的一些字符替换另一些字符，或替换与正则表达式匹配的字符串。str.replace(/replace/i, '替换')   str.replace('replace','替换')
match()方法，可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，并以数组形式返回匹配结果。str.match(/is/gi)
split()方法，用于把一个字符串分割成字符串数组
RegExp对象方法（compile()、exec()、test()）。
语法：var patt = new RegExp(pattern,modifiers); 或 var patt = /pattern/modifiers;
　　pttern为表达式，modifiers为修饰符用于指定全局匹配g，区分大小写i，和多行比配m。
compile()方法，用于在脚本执行过程中编译正则表达式，也可用于改变和重新编译正则表达式。
patt = /dog/g;patt.compile(patt);//patt = new RegExp('dog','g');patt.compile('dog','g');
exec()方法，用于检索字符串中是否有正则表达式的匹配值，有则返回匹配值，否则返回null。
var patt = /cat/g; patt.exec(str)
test()方法，用于检测字符是否匹配某个模式，有则返回true，否则返回false。
patt.test(str)
 
 
 
2019年2月25日
11:23
 
svg使用xml编写
svg文件必须使用.svg后缀名保存
可以在浏览器中直接打开
<?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"> <svg width="100%" version="1.1" xmlns="http://www.w3.org/2000/svg"> <circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red"/> </svg>
第一行包含了 XML 声明。请注意 standalone 属性！该属性规定此 SVG 文件是否是“独立的”，或含有对外部文件的引用。
standalone="no" 意味着 SVG 文档会引用一个外部文件 - 在这里，是 DTD 文件。
第二和第三行引用了这个外部的 SVG DTD。该 DTD 位于 “http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd”。该 DTD 位于 W3C，含有所有允许的 SVG 元素。
SVG 代码以 <svg> 元素开始，包括开启标签 <svg> 和关闭标签 </svg> 。这是根元素。width 和 height 属性可设置此 SVG 文档的宽度和高度。version 属性可定义所使用的 SVG 版本，xmlns 属性可定义 SVG 命名空间。
SVG 的 <circle> 用来创建一个圆。cx 和 cy 属性定义圆中心的 x 和 y 坐标。如果忽略这两个属性，那么圆点会被设置为 (0, 0)。r 属性定义圆的半径。
stroke 和 stroke-width 属性控制如何显示形状的轮廓。我们把圆的轮廓设置为 2px 宽，黑边框。
fill 属性设置形状内的颜色。我们把填充颜色设置为红色
 
<p>引入svg文件的几种方法：
1、通过iframe的src属性
2、通过object的data属性
3、通过embed的src属性
4、通过img的src属性
推荐使用iframe标签引入
</p>
<iframe :src="svg" width="300" height="100">
</iframe>
<object :data="svg" type=""></object>
<embed :src="svg"><embed>
<img :src="svg" alt="">
import svg from "./svg.svg";
data() {
return {
svg: svg
 
 
•	矩形 <rect>
•	圆形 <circle>
•	椭圆 <ellipse>
•	线 <line>
•	折线 <polyline>
•	多边形 <polygon>
•	路径 <path>
•	文本 <text>
•	<defs>引用元素的容器
•	<g> 用于把相关元素进行组合的容器元素
路径：
 
•	M = moveto
•	L = lineto
•	H = horizontal lineto
•	V = vertical lineto
•	C = curveto
•	S = smooth curveto
•	Q = quadratic Belzier curve
•	T = smooth quadratic Belzier curveto
•	A = elliptical Arc
•	Z = closepath
 
<path d="M250 150 L150 350 L350 350 Z" 
style="fill:rgba(255,255,255,0);stroke-width:1;stroke:rgb(0,0,0)" />
 
文本：
<text x="10" y="20" style="fill:red;">Several lines:
    <tspan x="10" y="45">First line</tspan>
    <tspan x="10" y="70">Second line</tspan>
</text>
 
画布无限大
视窗为svg的width和height
默认overflow:hidden,
只能通过更改设置overflow:visible 显示视窗以外的画布内容，设置scroll无效
视窗（svg元素）添加到一个div中，可以通过设置很大的视窗显示更多的画布上内容，然后容器可以滚动
 
 
1viewport就是值指SVG图片本身可视区域的大小（视口）(width 和 height)
2viewbox用来定义svg的可视范围
当没有设置viewbox的时候，viewbox就是整个viewport的大小，而当我们设定了viewbox，等于就是告诉SVG，我指定的这个区域是我要显示的，SVG就会把这个区域放大到viewport的大小，比如电视机
3preserveAspectRatio和viewbox是一个绝配的搭档，特别是当viewbox的值和viewport的值（也就是宽和高）不一样的时候，preserveAspectRatio属性就直接决定浏览器怎么来显示图片
 
viewBox="0 0 115 190"
viewBox 接收四个参数值，分别是 min-x，min-y，width，height。
min-x 和 min-y 决定了 viewBox 的左上角，width 和 height 决定了 viewBox 的宽和高
 viewBox变大，视口不变，可视范围增加，相当于缩小图片
viewBox变小，视口不变，可视范围减小，相当于放大图片
viewBox不变，视口变大，可视范围增加，相当于更改较大视口，然后viewBox减小，放大图片
相当于是把viewBox的内容放大或缩小到视口上显示
 svg.setAttribute('viewBox','0 0 1300 500');
 
 
preserveAspectRatio 属性用来强制统一缩放比，以保持图形的宽高比。
如果 viewBox 的宽高比和 SVG 视窗的宽高比不同，那么在拉伸 viewBox 来适应视窗的时候，就可能导致 SVG 图形发生扭曲。这个时候 preserveAspectRatio 就派上用场了
preserveAspectRatio = <align> <meetOrSlice>
 
 
 
 
//让svg滚动显示：视口变大，容器固定大小scroll
//更改svg元素的viewBox 大小调整到合适大小
svg.setAttribute('viewBox','100 0 1500 1000');
.svgcontainer{
    height:1000px;
    width:1500px;
    overflow:visible;
}
.viewport{
    transform:matrix(1,0,0,1,0,0)!important;
}
 
Transform
优点：可以做任意的缩放、平移、旋转，且可以用js动态更改属性。
缺点：不能在svg根元素中使用此属性，一般是给svg的所有直接子g元素添加此属性，才能达到缩放svg的效果
 
transform="translate(x-value, y-value)"
transform="scale(x-value, y-value)"
transform="rotate(angle,[centerX, centerY])"
transform="skewX(angle) skewY(angle)"
 
transform:matrix(a,b,c,d,e,f) 矩阵
如果是2D变换，括号里就是6个值得矩阵，如果是3D变换，括号里就是4*4的16值得矩阵
原始值
transform: matrix(1,0,0,1,0,0);
 
 
 
 
 
 
 
 
 
 
 
websocket
2019年2月25日
17:13
 
creatwebsocker() {
                var socket;
                if (typeof (WebSocket) == "undefined") {
                    console.log("您的浏览器不支持WebSocket");
                } else {
                    console.log("您的浏览器支持WebSocket");
                    //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  
                    //等同于socket = new WebSocket("ws://localhost:8083/checkcentersys/websocket/20");  
                    socket = new WebSocket("${basePath}websocket/${cid}".replace("http", "ws"));
                    //打开事件  
                    socket.onopen = function () {
                        console.log("Socket 已打开");
                        //socket.send("这是来自客户端的消息" + location.href + new Date());  
                    };
                    //获得消息事件  
                    socket.onmessage = function (msg) {
                        console.log(msg.data);
                        //发现消息进入    开始处理前端触发逻辑
                    };
                    //关闭事件  
                    socket.onclose = function () {
                        console.log("Socket已关闭");
                    };
                    //发生了错误事件  
                    socket.onerror = function () {
                        alert("Socket发生了错误");
                        //此时可以尝试刷新页面
                    }
                    //离开页面时，关闭socket
                    //jquery1.8中已经被废弃，3.0中已经移除
                    // $(window).unload(function(){  
                    //     socket.close();  
                    //});  
                }
            }
 
WebSocket 客户端
在客户端，没有必要为 WebSockets 使用 JavaScript 库。实现 WebSockets 的 Web 浏览器将通过 WebSockets 对象公开所有必需的客户端功能（主要指支持 Html5 的浏览器）。
 
客户端 API
以下 API 用于创建 WebSocket 对象。
 
var Socket = new WebSocket(url, [protocol] );
以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。
 
WebSocket 属性
以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：
 
属性        描述
Socket.readyState        只读属性 readyState 表示连接状态，可以是以下值：0 - 表示连接尚未建立。1 - 表示连接已建立，可以进行通信。2 - 表示连接正在进行关闭。3 - 表示连接已经关闭或者连接不能打开。
Socket.bufferedAmount        只读属性 bufferedAmount 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。
 
WebSocket 事件
以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：
 
事件        事件处理程序        描述
open        Socket.onopen        连接建立时触发
message        Socket.onmessage        客户端接收服务端数据时触发
error        Socket.onerror        通信发生错误时触发
close        Socket.onclose        连接关闭时触发
 
WebSocket 方法
以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：
 
方法        描述
Socket.send()        使用连接发送数据
Socket.close()        关闭连接
 
 
 
Test.vue
 
<template>
    <div>
        <p>表1</p>
        <el-table :data="tableData1">
            <el-table-column label="flowId" prop="flowId"></el-table-column>
            <el-table-column label="说明" prop="description"></el-table-column>
        </el-table>
        <p>表2</p>
        <el-table :data="tableData2">
            <el-table-column label="flowId" prop="flowId"></el-table-column>
            <el-table-column label="说明" prop="description"></el-table-column>
        </el-table>
        <el-button @click="closeAllWebsocket">关闭连接</el-button>
        <el-button @click="openAllWebsocket">开启连接</el-button>
    </div>
</template>
<script>
import {HostConfig as C} from "../config";
import Vue from 'vue'
 
    export default {
        name: "component_name",
        data() {
            return {
                tableData1:[{flowId:11},{flowId:12},{flowId:13},{flowId:13}],
                tableData2:[{flowId:11},{flowId:122},{flowId:13},{flowId:14}],
                websock:null,
            };
        },
        created(){
            this.creatwebsocker();
        },
        methods: {
            creatwebsocker() {
                var socket;
                if (typeof (WebSocket) == "undefined") {
                    console.log("您的浏览器不支持WebSocket");
                } else {
                    console.log("您的浏览器支持WebSocket");
                    //实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  
                    this.tableData1.forEach(item=>{
                        let flowId = item.flowId
                        item.wk = new WebSocket(`${C.paramlibAddr}/websocket/${flowId}`.replace("http", "ws"))
                        item.wk.onmessage = (e)=>{
                            console.log('有消息传递过来1')
                            Vue.set(item,'description',e.data)
                        }
                        item.wk.onclose = ()=>{
                            console.log(flowId + "连接关闭")
                        }
                        item.wk.onopen = this.websocketonopen;
                        item.wk.onerror = this.websocketonerror;
                    })
                    this.tableData2.forEach(item=>{
                        let flowId = item.flowId
                        item.wk = new WebSocket(`${C.paramlibAddr}/websocket/${flowId}`.replace("http", "ws"))
                        item.wk.onmessage = (e)=>{
                            console.log('有消息传递过来2')
                            this.tableData1.forEach(i1=>{
                                if(i1.flowId == item.flowId){
                                     Vue.set(i1,'description',e.data)
                                }
                            })
                            this.tableData2.forEach(i2=>{
                                if(i2.flowId == item.flowId){
                                     Vue.set(i2,'description',e.data)
                                }
                            })
                        }
                        item.wk.onopen = this.websocketonopen;
                        item.wk.onerror = this.websocketonerror;
                        item.wk.onclose = ()=>{
                            console.log(flowId + "连接关闭")
                        }
                    })
                    //相同的连接只有最后一个连接触发onmessage事件
                    //相同的连接每个连接都会触发open、close事件
                    //离开页面时，关闭socket：socket.close();  
                }
            },
            closeAllWebsocket(){
                this.tableData1.forEach(item=>{
                    item.wk.close()
                })
                this.tableData2.forEach(item=>{
                    item.wk.close()
                })
            },
            openAllWebsocket(){
                this.creatwebsocker()
            },
            websocketonopen: function () {
                console.log("WebSocket连接成功");
            },
            websocketonerror: function (e) {
                console.log("WebSocket连接发生错误");
            },
            websocketonmessage: function (e) {
                var da = e.data;
                console.log(da);
            },
            websocketclose: function (e) {
                console.log("connection closed (" + e.code + ")");
            },
        }
    }
</script>
<style scoped>
</style>
 
项目实例：
目的:1针对的未完成流程进行流程说明事实观测2获取待办数量，取消定时器的使用
问题：
1不在登录页面都需要连接获取待办数量变化监控：登录后连接，注销后断开
2刷新切换页面导致连接断开的处理：登录后建立连接，注销后关闭连接，在路由验证的地方，判断是否有连接？
3如果错过了一次流程推送怎么办？关闭了连接或者关闭了网页，所以推送的内容应该是更新的东西，而不是新添加，重新进入页面即使没有推送，都会重新拉取数据，获取最新信息
4如果是开两个窗口，建立了两个连接，或多个终端，只有最后一个连接会接收到推送，关闭最后一个，其他的接受不到推送,解决：连接路径添加当前毫秒
a用户t以 t1 t2 t3 建立了三个连接，这三个连接可以同时接收到相同推送数据，
b变量名建立的连接不会被覆盖，不同网页是独立的
5推送的数据使用store接受，在应用组件监控store数据变化渲染页面（组件监控store数据要使用computed接收，用到监控所以传递数据类型使用字符串避免深度监听的麻烦）
a组件在推送的消息有变化执行：通过监控computed中的变量：websocketmessage(){return this.$store.state.websocketMessage} 
b组件在推送消息即使没有变化也执行：store添加毫秒变量t，推送发生，更改毫秒变量t，组件监控computed的store毫秒变化，执行函数，参数还是computed中的变量
6监控待办审批数： 在header的created中获取一次待办数量(刷新页面没有推送的情况下获得待办数)，然后在store中如果有推送在获取一次待办数量（实时更新）
7监控版本变化：定时器 refreshVersionConfig    versionIsChang   versionInterval  推送        websocketonmessage 
主审审批后会有subjectName 测试审批后也会有subjectName  怎么判断是否有新版本？
有新版本的推送给谁？每个人？ 暂时取消用推送的方法提示版本更新
8自动重连问题(未实现)
9流程（需要发推送的情况）
a流程处理人应该收到推送
b流程发起人在进程有变化时应该收到推送
创建人创建后主审人会受到推送
主审审批后测试人员没有收到推送
主审审批后申请人员会受到推送，测试审批后申请人会受到推送
 
结合路由建立与断开websocket代码实现 app.js
 
var websocket = null
router.beforeEach((to, from, next) => {
  if (to.matched.some(m => m.meta.auth)) {//to对象{name:,meta:,matched:[],path:'',query:{}}
    console.log("to:", to.fullPath)
    //对路由进行验证是否已登录
    var temp = getCookie("LAST_USER");
    if (temp) {
      store.state.islogin = true;
      store.state.username = temp;
      //正常跳转到设置好的页面
      next()
      //判断是否有websocket连接，如果没有进行连接
      if(!websocket){
        let websocketId = temp;
        let timestamp=new Date().getTime()
        let id = websocketId + timestamp
        const url = `${C.paramlibAddr}/websocket/${id}`
        websocket = new WebSocket(url.replace("http", "ws"));
        websocket.onopen = ()=>{
          console.log("使用" + id + "连接到websocket")
        }
        websocket.onmessage = (r)=>{
          store.commit("websocketSendMessage",r.data)
        }
        websocket.onclose = ()=>{
          console.log("断开websocket连接")
        }
        websocket.onerror = (er)=>{
            console.log("websocket出错" + er)
        }
      }
    } else {
      //未登录则跳转到登陆界面，query:{ Rurl: to.fullPath}表示把当前路由信息传递过去方便登录后跳转回来；
      store.state.islogin = false;
      next({
        path: '/login',
        query: {
          Rurl: to.fullPath
        }
      })
      //判断是否有websocket连接，如果有进行断开
      if(websocket){
        websocket.close()
        websocket = null
      }
    };
  } else {
    //进入到登录页面(打开系统，注销登录)
    next()
    //判断是否有websocket连接，如果有进行断开
    if(websocket){
      websocket.close()
      websocket = null
    }
  }
})
 
 
 
 
重连
var connection = function() {
    var fromUserId = document.getElementById("fromUserId");
    var url = 'ws://' + window.location.host + '/ycxcode/websocket/commodity/{' + fromUserId.value + '}';
    socket = new WebSocket(url);
    socket.onopen = onopen;
    socket.onmessage = onmessage;
    socket.onclose = onclose;
    socket.onerror = onerror;
}
var onclose = function() {
    console.log("close...");
    reconnection();
}
var reconnection = function() {
    count = count + 1;
    console.log("reconnection...【" + count + "】");
    //1与服务器已经建立连接
    if (count >= MAX || socket.readyState == 1) {
        clearTimeout(t);
    } else {
        //2已经关闭了与服务器的连接
        if (socket.readyState == 3) {
            connection();
        }
        //0正尝试与服务器建立连接,2正在关闭与服务器的连接
        t = setTimeout(function() {reconnection();}, 100);
    }
}
核心在onclose事件发生时调用reconnection()方法，但是要特别注意重试次数和状态控制。
在socket.readyState == 3(已经关闭了与服务器的连接)才真正的发起连接，
在socket.readyState == 1(与服务器已经建立连接)或重试次数超了设定值就终止重试，但要注意在终止浏览器页面及网络恢复时重刷页面
在socket.readyState == 0(正尝试与服务器建立连接)或socket.readyState == 2(正在关闭与服务器的连接)时仅仅重试，而不发起连接
 
 
Es6
2019年5月9日
18:44
 
Generator 
Generator 函数是一个状态机，封装了多个内部状态
提供了一种可以暂停执行的函数。yield表达式就是暂停标志。
执行 Generator 函数会返回一个遍历器对象,可以依次遍历 Generator 函数内部的每一个状态。
两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态,return也是一种状态
 
调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）
调用遍历器对象的next方法，使得指针移向下一个状态
next方法返回一个对象，value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。
next执行到紧跟下个yield后的一个表达式
（1）遇到yield表达式，就暂停，执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。
 
（2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。
 
（3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。
 
（4）如果该函数没有return语句，则返回的对象的value属性值为undefined。
 
next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。否则为undefined
Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行
console.log('第二次打印' + (yield console.log('第一次打印')))
Generator 函数可以返回一系列的值，因为可以有任意多个yield
函数内即使没有yield，调用函数也不会执行，只用调用next才会执行
yield必须在直接generator函数内部，隔代报错
 
任意一个对象的Symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象
由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的Symbol.iterator属性，从而使得该对象具有 Iterator 接口
有了 Iterator 接口，可以被...运算符遍历
 
 
读取文件
2019年6月3日
16:13
 
文件内容读取：
<input type="file" ref="archiveFile" name="" id="" @change="changeArchiveFile">
 
            changeArchiveFile(){
                let _this=this
                let fileInput=this.$refs.archiveFile;
                if(fileInput.value){
                    let file=fileInput.files[0]
                    let reader=new FileReader()
                    reader.readAsArrayBuffer(file);//读取文件
                    reader.onload = function(e) {//读完文件的回调e.target.result
                        let buf = new Uint8Array(reader.result);
                        let arr=[]
                        for (let i in buf) {
                            arr.push(buf[i])
                        }
                        _this.paramArchiveForm={..._this.paramArchiveForm,
                            attachfileName:file.name,
                            attachfileUrl:arr,
                        }
                    }
                }else{
                    this.paramArchiveForm={..._this.paramArchiveForm,
                        attachfileName:'',
                        attachfileUrl:[],
                    }
                }
            },
