 
2019年5月13日
17:57
 
打开一个新窗口：
<!-window.open([URL],[窗口名称],[参数字符串])->  
 
<!-URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。
窗口名称：可选参数，被打开窗口的名称。  
 
1.该名称由字母、数字和下划线字符组成。  
 
2."_top"、"_blank"、"_self"具有特殊意义的名称。  
  _blank：在新窗口显示目标网页  
  _self：在当前窗口显示目标网页  
  _top：框架网页中在上部窗口中显示目标网页  
 
3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。  
  
4.name 不能包含有空格。参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。
 
window.open('http://www.baidu.com','_blank','width=300,height=200,menubar=no,toolbar=no,status=no,scrollbars=yes') 
 
 
网络通信与跨域
2019年2月25日
11:17
 
跨域是指的当前资源访问其他资源时发起的http请求由于安全原因（由于同源策略，域名、协议。端口中只要有一个不同就不同源），浏览器限制了这些请求的正常访问，特别需要注意的是这些发生在浏览器中。而通过postman等工具调用接口时，只是简单的访问一个资源，并不存在资源的相互访问。
 
非简单请求会变成preflighted request(预检option)
简单请求（三个条件必须都成立）：
1. 只能是Get、Head、Post方法
2. 除了浏览器自己在Http头上加的信息（如Connection、User-Agent），开发者只能加这几个：Accept、Accept-Language、Content-Type、。。。。
3. Content-Type只能取这几个值：
application/x-www-form-urlencoded
multipart/form-data
text/plain
 
 
OPTIONS方法是用于请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。
1、获取服务器支持的HTTP请求方法
2、用来检查服务器的性能。例如：AJAX进行跨域请求时的预检，需要向另外一个域名的资源发送一个HTTP OPTIONS请求头，用以判断实际发送的请求是否安全。
 
 
 
同源策略与跨域
1、先来说说什么是源
• 源（origin）就是协议、域名和端口号。
以上url中的源就是：http://www.company.com:80
若地址里面的协议、域名和端口号均相同则属于同源。
以下是相对于 http://www.a.com/test/index.html 的同源检测
• http://www.a.com/dir/page.html ----成功
• http://www.child.a.com/test/index.html ----失败，域名不同
• https://www.a.com/test/index.html ----失败，协议不同
• http://www.a.com:8080/test/index.html ----失败，端口号不同
2.什么是同源策略？
同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。
• 不受同源策略限制的：
1、页面中的链接，重定向以及表单提交是不会受到同源策略限制的。
2、跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<script src="..."></script>，<img>，<link>，<iframe>等。
二、跨域
1、什么是跨域
受前面所讲的浏览器同源策略的影响，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象是就需要跨域。
 
2、跨域的实现形式
 
降域 document.domain
JSONP跨域
CORS
其他方法：
1. HTML5的postMessage方法
2. window.name
3. location.hash
 
 
 
 
 
CORS:
 
CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。
 
它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。
 
实现CORS通信的关键是服务器
 
简单请求：
上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。
 
（1）Access-Control-Allow-Origin
 
该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。
 
（2）Access-Control-Allow-Credentials
 
该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。
 
（3）Access-Control-Expose-Headers
 
该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回FooBar字段的值。
 
CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。
Access-Control-Allow-Credentials: true
另一方面，开发者必须在AJAX请求中打开withCredentials属性。
var xhr = new XMLHttpRequest();
xhr.withCredentials = true;
如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie
 
 
非简单请求
非简单请求是那种对服务器有特殊要求的请求
预检请求
 
var url = 'http://api.alice.com/cors';
var xhr = new XMLHttpRequest();
xhr.open('PUT', url, true);
xhr.setRequestHeader('X-Custom-Header', 'value');
xhr.send();
除了Origin字段，"预检"请求的头信息包括两个特殊字段。
 
（1）Access-Control-Request-Method
 
该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。
 
（2）Access-Control-Request-Headers
 
该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。
 
服务器收到"预检"请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应
 
（1）Access-Control-Allow-Methods
 
该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。
 
（2）Access-Control-Allow-Headers
 
如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。
 
（3）Access-Control-Allow-Credentials
 
该字段与简单请求时的含义相同。
 
（4）Access-Control-Max-Age
 
该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。
一旦服务器通过了"预检"请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样
 
JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。
 
 
 
 
 MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。
Content-Type是返回消息中非常重要的内容，表示后面的文档属于什么MIME类型，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件
 
Xhr = new XMLHttpRequest()
 
事件：
onreadystatechange
Ontimeout 超时事件
 
方法：
Open
setRequestHeader
overrideMimeType("text/xml") 重写响应MIME类型
Send
Abort
getResponseHeader
getAllResponseHeaders
 
属性
Status
readyState
statusText
responseText
responseXML
Timeout 超时设定毫秒
 
 
Url: 
1.	查询字符串已?开始，已&连接，每个键值对使用encodeURIComponent()编码
formData
Var data = new FormData(document.getElementById("user-info")
Data.append("name","xiaozhang")
Xhr.send(data)
 
 
跨域问题：
跨域不是接口的限制 而是浏览器为了保障数据安全做的限制
同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制
同源:如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的源
 
没有同源策略限制的接口请求:任意网站可以发送其他网站的请求（截获cookie）
没有同源策略限制的Dom查询：钓鱼网站
 
跨域方法：
1、JSONP：script、img这样的获取资源的标签是没有跨域限制的；JSONP只能发GET请求，因为本质上script加载资源就是GET
2、空iframe加form
3、cors跨域资源共享
简单请求：后端：'Access-Control-Allow-Origin':'*',前端不用做更改；*时cookie不会再http请求中带上；
非简单请求:预检测请求（通过前端发请求的时候增加一个额外的headers来触发非简单请求）
4、代理：请求的时候还是用前端的域名，然后有个东西帮我们把这个请求转发到真正的后端域名上（Nginx配置）
 
项目配置实例：
1、CORS跨域资源共享:后端设置Access-Control-Allow-Origin: *，标识允许哪个域的请求；实现跨域/
2、配置 webpack 将接口代理到本地：config/index.js 文件；或者是在webpack.config.js中的devServer: {proxy:{}}
proxyTable: {
      '/v1/**': {
        target: 'http://atecloud-sit.huawei.com', // 接口域名
        secure: false,
        changeOrigin: true,
      },
}
3、用express框架实现反向代理
var proxyMiddleWare = require("http-proxy-middleware");
var proxyPath = "http://192.168.0.48:9005";//目标后端服务地址(公司同事电脑地址)
var proxyOption ={target:proxyPath,changeOrigoin:true};
app.use("/discern",proxyMiddleWare(proxyOption))//这里要注意"/discern" 是匹配的路由,它会将匹配的路由进行转发，没匹配到的就不会转发。('/discern'完全可以写成'/'就是说所有路由都可以访问)
或者写成：
app.use('/api', proxy({
   target: 'http://xxxxx', // 目标代理地址
   changeOrigin: true,
   pathRewrite: {
       '^/api': ''
   }  
}))
4、jsonp跨域：通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入，有种回调的味道！
 
 
正向代理与反向代理：
正向代理：代理访问外部资源,代理客户端（明确知道你要访问的是谁；翻墙）
正向代理 是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理
反向代理：以代理服务器来接受internet上的连接请求（不知道请求的具体服务器；负载均衡）
反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。
 
 
 
 
常识
2019年1月24日
18:27
浏览器快捷键
Ctrl+Tab 或 Ctrl+PgDown                切换到下一个标签页。
Ctrl+Shift+Tab 或 Ctrl+PgUp            切换到上一个标签页。
Ctrl+W 或 Ctrl+F4                     关闭当前标签页或弹出窗口。
Alt 和向左箭头键。    转到当前标签页的上一页浏览历史记录
obj[name]只有name为变量才可以这么写        obj['name']        obj.name
var obj = { name:'name1'} 这里的那么不是变量
var {a,b,c} = {a:'a1'} 
console.log(a,b,c)//a1 undefined undefined
            console.log( 'a' in {a:'b1'}) //true
            console.log({a:'a1'} instanceof Object ) //true
            function aa (){}  console.log(aa instanceof Function ) //true
in：判断一个属性是否属于某个对象
instanceof：根据原型链来判断
获取对象属性的信息 Object.getOwnPropertyDescriptor({pro:true}, 'pro');
创建对象属性的信息 Object.defineProperty(obj,'name',{configurable:false,writable:false,enumerable:true,value:'name1'})
//尾部添加元素arr.push(-55);
//头部添加元素arr.unshift(-11)
//尾部删除元素arr.pop();
//头部删除元素arr.shift();
 
var arr = [1,2]
Array.prototype.x = 'add' 使用in遍历数组会访问到在原型链上添加的元素
for ( let i=0; i<arr.length;i++){
  if(arr.hasOwnProperty(i)){//过滤原型链上面的属性
     console.log(arr[i])
  }
}
请求发送cookie
通过头部
header("Set-Cookie: g=121");
当浏览器向后台发起请求时，如果是跨域请求，那么就不会发送cookie给后台，需设置
xhr.withCredentials = true;
 
 
上传文件
1通过服务直接上传请求头和请求体要修改
var param = new FormData(); // 创建form对象
    param.append('file', file, file.name); // file对象是 beforeUpload参数
    var config = {
        headers: { 'Content-Type': 'multipart/form-data' }
    };
    // 添加请求头
    return AXIOS.post(path, param, config);
2通过字节流传递文件给服务器
 
host文件
位置：C:\Windows\System32\drivers\etc
作用：建立域名和IP的映射关系
规则：一个IP地址和一个与之有映射关系的主机名，IP地址要放在每段的最前面，映射的主机名在IP后面，中间用空格分隔。对于映射说明，用“#”分割注释
语法：        127.0.0.1 localhost localhost.huawei.com
10.57.22.248 hlj.huawei.com
 
查看环境变量是否配置（cmd命令不区分大小写）
set java_home
 
Path变量C:\jdk1.5.0_22\bin
Path的作用其实就是方便我们使用一些命令。作用是指定命令搜索路径
Windows在查找可执行文件是这样的：在终端输入java时，系统就会先在当前目录查找java程序，如果有就会执行java，否则就会在Path中指定的路径中找，
 
 
JAVA_HOME变量C:\jdk1.5.0_22
它指向jdk的安装目录，Eclipse/NetBeans/Tomcat等软件就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。
JAVA_HOME
JAVA_HOME里面的内容是JDK安装目录。其实不设置JAVA_HOME也是可以的，只要有Path就行了。但是设置JAVA_HOME可以方便在Path中使用、更新JDK目录。比如，jdk的安装路径是C:\jdk1.5.0_22，Path设置为C:\jdk1.5.0_22\bin，而当我们把JAVA_HOME设为C:\jdk1.5.0_22时，设置Path就可以写成%JAVA_HOME%\bin，以后当我们使用其他版本的jdk，就可以只修改JAVA_HOME的值
 
 
CLASSPATH
CLASSPATH环境变量。作用是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过CLASSPATH来寻找类的.class文件。我们需要把jdk安装目录下的lib子目录中的dt.jar和tools.jar设置到CLASSPATH中，当然，当前目录“.”也必须加入到该变量中。
 
 
classpath= ".;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar"
 
java_home = "C:\Program Files\Java\jdk1.5.0"
 
path ="%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin "
 
 
http
2019年3月14日
16:00
IP:
 
127.0.0.1： 是本地环回地址，专供自己访问自己（127开头的IP地址，都是回环地址）
localhost：指向 127.0.0.1 （windows系统默认，可自行配置）
0.0.0.0：表示本机中所有的IPV4地址（ping不通的）。监听0.0.0.0的端口，就是监听本机中所有IP的端口。
本机IP：通常仅指在同一个局域网内，能同时被外部设备访问和本机访问的那些IP地址（可能不止一个cmd：ipconfig）
 
网络划分公网（连Internet的）与内网
公网中的IP地址为公有地址（公网中不可能存在两个相同的IP地址）
内网（即局域网）中的IP地址为私有地址（私有地址：在同一个局域网内，IP地址是唯一的；但是在不同的局域网内，IP地址是可以重复出现的；不允许出现在Internet中的，我们在公网中是看不到私有IP地址的，所以，私有地址是不能直接与Internet连接的）
将私有IP地址转换成公网IP地址，与外部连接：
路由器中会装有一个叫做 NAT（网络地址转换） 的软件，我们的路由器中会至少会有一个有效的公网IP，NAT会将我们的私有地址转成路由器中的公网IP与外部Internet连接。而同样的，因为使用的是路由器中的公共的公网IP来连接Internet，所以这个内网中的PC在Internet中显示的都是路由器的公共IP，这样做不仅提供了一定程度的安全，也可以有效的减缓可用的IP地址空间的枯竭问题
状态码：
200 - 请求成功
301 - 资源（网页等）被永久转移到其它URL
404 - 请求的资源（网页等）不存在
500 - 内部服务器错误
第一个十进制数字定义了状态码的类型
1**        信息，服务器收到请求，需要请求者继续执行操作
2**        成功，操作被成功接收并处理
3**        重定向，需要进一步的操作以完成请求
4**        客户端错误，请求包含语法错误或无法完成请求
5**        服务器错误，服务器在处理请求的过程中发生了错误
 
 
Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。
 
响应头：
 
Allow	服务器支持哪些请求方法（如GET、POST等）。
Content-Encoding	文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压 缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的 Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader("Accept- Encoding")）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。
Content-Length	表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过 byteArrayStream.writeTo(response.getOutputStream()发送内容。
Content-Type	表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。 
Date	当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。
Expires	应该在什么时候认为文档已经过期，从而不再缓存它？
Last-Modified	文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件 GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。
Location	表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。
Refresh	表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader("Refresh", "5; URL=http://host/path")让浏览器读取指定的页面。 
注 意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV="Refresh" CONTENT="5;URL=http://host/path"＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的 HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。 
 
注意Refresh的意义是"N秒之后刷 新本页面或访问指定页面"，而不是"每隔N秒刷新本页面或访问指定页面"。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可 以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV="Refresh" ...＞。 
 
注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。
Server	服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。
Set-Cookie	设置和页面关联的Cookie。Servlet不应使用response.setHeader("Set-Cookie", ...)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。
WWW-Authenticate	客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的 应答中这个头是必需的。例如，response.setHeader("WWW-Authenticate", "BASIC realm=＼"executives＼"")。 
注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。
 
来自 <https://www.w3cschool.cn/http/6hafgfmw.html> 
 
 
字节数组，编码与文件
2019年3月6日
15:32
 
编码是将字符串转换为字节数组的过程，解码是将字节数组转换成字符串的过程。
 
进制转换：：
parseInt(string, radix); 函数可解析一个字符串，并返回一个十进制整数。
num.toString(2)方法可把一个 Number 对象转换为一个字符串，并返回结果。
parseInt(num,16).toString(2)  //十六进制转二进制
parseInt(num).toString(2)   //十进制转二进制
parseInt(num,16);   //十六进制转十进制
 
字符与unicode转化：：
let s = String.fromCharCode(i)  unicode编码（十进制） 转换为 字符
let n = str.charCodeAt(0)        字符串中某位置字符 转换为 Unicode 编码(十进制)
let s = str.charAt(3);                 返回字符串指定位置字符
 
unicode编码： 符号的二进制代码
UTF-8编码:Unicode 的实现方式
 
 
字符串与字节流转换：：
字符串 => utf-8字节流 => 十六进制字符串
function  stringToByte(str) {//字符串转utf-8字节数组
                let bytes = new Array();
                let len, c;
                len = str.length;
                for (var i = 0; i < len; i++) {
                    c = str.charCodeAt(i);
                    if (c >= 0x010000 && c <= 0x10FFFF) {
                        bytes.push(((c >> 18) & 0x07) | 0xF0);
                        bytes.push(((c >> 12) & 0x3F) | 0x80);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000800 && c <= 0x00FFFF) {
                        bytes.push(((c >> 12) & 0x0F) | 0xE0);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000080 && c <= 0x0007FF) {
                        bytes.push(((c >> 6) & 0x1F) | 0xC0);
                        bytes.push((c & 0x3F) | 0x80);
                    } else {
                        bytes.push(c & 0xFF);
                    }
                }
                return bytes;
            }
 
2.
var  encoder = new TextEncoder('utf8');//TextEncoder.encode(String);接收一个String类型的参数返回一个Unit8Array;进行编码
var str2 = "字符串"
var arr1 = encoder.encode(str2)//返回的是Unit8Array 数组
var arr2 = stringToByte(str2)//返回的是数组  两个数组内容相同
字节流转十六进制
function hexString(bytes) {
  var arr = bytes.map(function (code) {
    return (code).toString(16).toUpperCase();
  });
 
  return arr.join(' ');
}
 
 
 
字节数组转字符串：：
http请求获取到的网页源码是字节数组，并不是字符串。只有识别了网页所用的编码，例如utf8，将字节数组根据编码的规则，进行解码，才可以获得网页源码的字符串
 
。这个过程浏览器执行，前台可以直接把后台传回的字节数组当做字符串使用
 
function byteToString(arr) {//字节数组转字符串
    if(typeof arr === 'string') {
        return arr;
    }
    var str = '',
        _arr = arr;
    for(var i = 0; i < _arr.length; i++) {
        var one = _arr[i].toString(2),
            v = one.match(/^1+?(?=0)/);
        if(v && one.length == 8) {
            var bytesLength = v[0].length;
            var store = _arr[i].toString(2).slice(7 - bytesLength);
            for(var st = 1; st < bytesLength; st++) {
                store += _arr[st + i].toString(2).slice(2);
            }
            str += String.fromCharCode(parseInt(store, 2));
            i += bytesLength - 1;
        } else {
            str += String.fromCharCode(_arr[i]);
        }
    }
    return str;
}
 
 
 
 
 
编码与解码：：
unescape() 函数可对通过 escape() 编码的字符串进行解码。
escape 方法返回一个包含了 charstring 内容的字符串值（ Unicode 格式）。所有空格、标点、重音符号以及其他非 ASCII 字符都用 %xx 编码代替，其中 xx 等于表示该字符的十六进制数。例如，空格返回的是 "%20"
通过找到形式为 %xx 和 %uxxxx 的字符序列（x 表示十六进制的数字），用 Unicode 字符 \u00xx 和 \uxxxx 替换这样的字符序列进行解码
unescape 方法不能用于解码统一资源标识码 (URI)。
针对URL编码解码使用 encodeURI()或encodeURIComponent() 和 decodeURIComponent 或decodeURI 方法。
encodeURI()对 URI 进行完整的编码，如果 URI 组件中含有分隔符，比如 ? 和 #，则应当使用 encodeURIComponent() 方法分别对各组件进行编码，编码方法返回编码副本，不会改变原字符串
 
 
 
关于编码：：
 
1. ASCII码
 
我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。
 
上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。
 
ASCII码一共规定了128个字符的编码，比如空格"SPACE"是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。
 
2、非ASCII编码
 
英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。
 
但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0--127表示的符号是一样的，不一样的只是128--255的这一段。
 
至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。
 
中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的Unicode和UTF-8是毫无关系的。
 
3.Unicode
 
正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。
 
可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。
 
Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字"严"。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。
 
4. Unicode的问题
 
需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。
 
比如，汉字"严"的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。
 
这里就有两个严重的问题，第一个问题是，如何才能区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。
 
它们造成的结果是：1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。2）Unicode在很长一段时间内无法推广，直到互联网的出现。
 
5.UTF-8
 
互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。
 
UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。
 
UTF-8的编码规则很简单，只有二条：
 
1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。
 
2）对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。
 
下表总结了编码规则，字母x表示可用编码的位。
 
Unicode符号范围 | UTF-8编码方式
(十六进制) | （二进制）
--------------------+---------------------------------------------
0000 0000-0000 007F | 0xxxxxxx
0000 0080-0000 07FF | 110xxxxx 10xxxxxx
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
 
跟据上表，解读UTF-8编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。
 
下面，还是以汉字"严"为例，演示如何实现UTF-8编码。
 
已知"严"的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此"严"的UTF-8编码需要三个字节，即格式是"1110xxxx 10xxxxxx 10xxxxxx"。然后，从"严"的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，"严"的UTF-8编码是"11100100 10111000 10100101"，转换成十六进制就是E4B8A5。
 
6. Unicode与UTF-8之间的转换
 
Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储
UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式，根据不同的符号而变化字节长度
 
 
通过上一节的例子，可以看到"严"的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。它们之间的转换可以通过程序实现。
 
在Windows平台下，有一个最简单的转化方法，就是使用内置的记事本小程序Notepad.exe。打开文件后，点击"文件"菜单中的"另存为"命令，会跳出一个对话框，在最底部有一个"编码"的下拉条。
 
 
 
里面有四个选项：ANSI，Unicode，Unicode big endian 和 UTF-8。
 
1）ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。
 
2）Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。
 
3）Unicode big endian编码与上一个选项相对应。我在下一节会解释little endian和big endian的涵义。
 
4）UTF-8编码，也就是上一节谈到的编码方法。
 
选择完"编码方式"后，点击"保存"按钮，文件的编码方式就立刻转换好了。
 
7. Little endian和Big endian
 
上一节已经提到，Unicode码可以采用UCS-2格式直接存储。以汉字"严"为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。
 
这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。
 
因此，第一个字节在前，就是"大头方式"（Big endian），第二个字节在前就是"小头方式"（Little endian）。
 
那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？
 
Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做"零宽度非换行空格"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。
 
如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。
 
8. 实例
 
下面，举一个实例。
 
打开"记事本"程序Notepad.exe，新建一个文本文件，内容就是一个"严"字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。
 
然后，用文本编辑软件UltraEdit中的"十六进制功能"，观察该文件的内部编码方式。
 
1）ANSI：文件的编码就是两个字节"D1 CF"，这正是"严"的GB2312编码，这也暗示GB2312是采用大头方式存储的。
 
2）Unicode：编码是四个字节"FF FE 25 4E"，其中"FF FE"表明是小头方式存储，真正的编码是4E25。
 
3）Unicode big endian：编码是四个字节"FE FF 4E 25"，其中"FE FF"表明是大头方式存储。
 
4）UTF-8：编码是六个字节"EF BB BF E4 B8 A5"，前三个字节"EF BB BF"表示这是UTF-8编码，后三个"E4B8A5"就是"严"的具体编码，它的存储顺序与编码顺序是一致的
获取上传文件的绝对路径
<input type="file" id="fileName" onchange="fileChange(this)" >
function fileChange(file){
  console.log(file.value) //文件绝对路径
}
<input type="file" id="fileName" name="file_name" @change="fileChange($event)">
fileChange(file) {
        let files = document.getElementById('fileName').files[0]
        // console.log(this.getObjectURL(files))
        console.log(files.name) //文件名MP1.xml
        console.log(file.target.value) //文件路径 C:\fakepath\MP1.xml
},
 
 
 
 
 
读文件：
读为字节数组        
let reader = new FileReader()
                reader.readAsArrayBuffer(files);
                reader.onload = function () {
                    var buf = new Uint8Array(reader.result);
                    // console.log(typeof buf) //object 字节数组对象
                    var arr = []
                    for (let i in buf) {
                        arr.push(buf[i])
                    }
 
读为字符串
stringToByte(str) {//字符串转字节数组
                let bytes = new Array();
                let len, c;
                len = str.length;
                for (var i = 0; i < len; i++) {
                    c = str.charCodeAt(i);
                    if (c >= 0x010000 && c <= 0x10FFFF) {
                        bytes.push(((c >> 18) & 0x07) | 0xF0);
                        bytes.push(((c >> 12) & 0x3F) | 0x80);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000800 && c <= 0x00FFFF) {
                        bytes.push(((c >> 12) & 0x0F) | 0xE0);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000080 && c <= 0x0007FF) {
                        bytes.push(((c >> 6) & 0x1F) | 0xC0);
                        bytes.push((c & 0x3F) | 0x80);
                    } else {
                        bytes.push(c & 0xFF);
                    }
                }
                return bytes;
            },
            string16ToText(hexCharCodeStr){//16进制字符串转文本字符串
                var trimedStr = hexCharCodeStr.trim();
            　　var rawStr = 
            　　trimedStr.substr(0,2).toLowerCase() === "0x"
            　　? 
            　　trimedStr.substr(2) 
            　　: 
            　　trimedStr;
            　　var len = rawStr.length;
            　　if(len % 2 !== 0) {
            　　　　alert("Illegal Format ASCII Code!");
            　　　　return "";
            　　}
            　　var curCharCode;
            　　var resultStr = [];
            　　for(var i = 0; i < len;i = i + 2) {
            　　　　curCharCode = parseInt(rawStr.substr(i, 2), 16); // ASCII Code Value
            　　　　resultStr.push(String.fromCharCode(curCharCode));
            　　}
            　　return resultStr.join("");
            },
            byteToString(buffer){//字节数组转16进制字符串
                return Array.prototype.map.call(new Uint8Array(buffer), x => ("00" + x.toString(16)).slice(-2))
                .join("");
            },
            byteToString2(arr){//字节数组转16进制字符串
                var str = "";
                for (var i = 0; i < arr.length; i++) {
                    var tmp = arr[i].toString(16);
                    if (tmp.length == 1) {
                    tmp = "0" + tmp;
                    }
                    str += tmp;
                }
                return str;
            },
            strToString16(str){ //字符串转16进制字符串
                if(str === ""){
                    return "";
                }
            　　var hexCharCode = [];
            　　hexCharCode.push("0x"); 
            　　for(var i = 0; i < str.length; i++) {
            　　　　hexCharCode.push((str.charCodeAt(i)).toString(16));
            　　}
            　　return hexCharCode.join("");
            },
            byteToStr(buffer){//字节数组转文本字符串
                let str1 = this.byteToString2(buffer)
                let str2 = this.string16ToText(str1)
                return str2
            },
