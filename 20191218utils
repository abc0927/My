import CryptoJS from "crypto-js";
export var crypt = {
  //加密
  encrypt(word, keyStr) {
    keyStr = keyStr ? keyStr : "abcdefgabcdefg12";
    var key = CryptoJS.enc.Utf8.parse(keyStr); //Latin1 w8m31+Yy/Nw6thPsMpO5fg==
    var srcs = CryptoJS.enc.Utf8.parse(word);
    var encrypted = CryptoJS.AES.encrypt(srcs, key, {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    });
    return encrypted.toString();
  },
  //解密
  decrypt(word, keyStr) {
    keyStr = keyStr ? keyStr : "abcdefgabcdefg12";
    var key = CryptoJS.enc.Utf8.parse(keyStr); //Latin1 w8m31+Yy/Nw6thPsMpO5fg==
    var decrypt = CryptoJS.AES.decrypt(word, key, {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    });
    return CryptoJS.enc.Utf8.stringify(decrypt).toString();
  }
};

export function matchStr(data, val) {
  //匹配字符串中的字符
  if (data) {
    return data.indexOf(val) != -1;
  } else {
    return false;
  }
}

export function matchArr(arr, val) {
  //匹配数组串中的元素
  if (arr) {
    return arr.some(i=>i==val);
  } else {
    return false;
  }
}

/*
 * 对象数组按字段重排序
 * 参数说明：条件之间用英文逗号隔开，同一组条件中字段与规则应该有一个空格隔开
 * option:"id desc,name asc"与"id desc,name"效果相同，表示优先按id降序排列，其次按name升序排列
 * 调用实例arrSort(r.data, "bom asc,groupName asc,paramId asc");
 */
export function arrSort(array, option) {
  if (array instanceof Array) {
    let option0 = option || "";
    let option1 = option0.split(",");
    for (let i = option1.length - 1; i >= 0; i--) {
      let op = option1[i];
      op = op.split(" ");
      if (op[0] != "") {
        if (typeof op[1] == "undefined" || (op[1] != "asc" && op[1] != "desc")) {
          op[1] = "asc";
        }
        let key = op[0];
        let method = op[1];
        if (method == "asc") {
          //升序
          array.sort(function(v1, v2) {
            if (v1[key] < v2[key]) {
              return -1;
            } else if (v1[key] > v2[key]) {
              return 1;
            } else {
              return 0;
            }
          });
        } else {
          array.sort(function(v1, v2) {
            if (v1[key] > v2[key]) {
              return -1;
            } else if (v1[key] < v2[key]) {
              return 1;
            } else {
              return 0;
            }
          });
        }
      }
    }
    return array;
  } else {
    return array;
  }
}

export function getUuid() {
  var d = new Date().getTime();
  var uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c == "x" ? r : (r & 0x3) | 0x8).toString(16);
  });
  return uuid;
}

export function fileDownLoad(strArr, name) {
  const blob = new Blob([strArr])
  const fileName = name
  if ('download' in document.createElement('a')) { // 非IE下载
      const elink = document.createElement('a')
      elink.download = fileName
      elink.style.display = 'none'
      elink.href = URL.createObjectURL(blob)
      document.body.appendChild(elink)
      elink.click()
      URL.revokeObjectURL(elink.href) // 释放URL 对象
      document.body.removeChild(elink)
  } else { // IE10+下载
      navigator.msSaveBlob(blob, fileName)
  }
}
