API：

 
delete item[key];
arr.push(item)

字符串
toUpperCase() 转为大写
toLowerCase()转为小写
.Trim()移除字符串两侧空格
substring( start ,stop) 提取字符串中字符返回的子串包括 start 处的字符，但不包括 stop 处的字符,第一位是0
str.slice(beginIndex[, endIndex])；
str.substr(start, [length])

截取：str.slice(from[,end])
分割：str.split("分割符")
查找：str.indexOf(value[,from])
替换：str.replace("被替换字符","替换字符")
拼接：str.concat(value)
获取指定位置字符：str.charAt(index)或str[index]
字符串转ASCII：str.charCodeAt(index)
ASCII转字符串：String.fromCharCode(Unicode)

输入框只能输入数字：
<el-input-number></el-input-number>

<el-input @keypress="keypress" v-model="num"></el-input>
<input type="text" maxlength="4" v-model="num"  @keypress="keypress" >
            keypress(event) { //input keypress
                if (event.keyCode < 48 || event.keyCode > 57) {
                    event.returnValue = false;
                }
            }


            getUUID: function () { //获取随机UUID
                var d = new Date().getTime();
                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = (d + Math.random() * 16) % 16 | 0;
                    d = Math.floor(d / 16);
                    return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
                });
                return uuid;
            },






JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串
JSON.parse() 方法用于将一个 JSON 字符串转换为对象

 
input 事件 
oninput 事件在用户输入时触发，它是在元素值发生变化时立即触发
change  事件要在 input 失去焦点的时候才会触发；
 
 e.userId.toLowerCase().trim() == this.userId.toLowerCase().trim()

substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符


短路求值
与（&&）运算符将会返回第一个false/‘falsy’的值。当所有的操作数都是true时，将返回最后一个表达式的结果。
或（||）运算符将返回第一个true/‘truthy’的值。当所有的操作数都是false时，将返回最后一个表达式的结果。




移位运算符：
a<<n 左移
将a的二进制向左移n位，低位补0；向左移n位，相当于十进制乘2的n次方；
a>>>n 无符号右移
将a的二进制向右移n位，高位补0；向右移n位，相当于十进制除2的n次方
a>>n 有符号右移
将a的二进制向右移n位，如果是整数，高位补0，如果负数，高位补1；相当于十进制除2的n次方，并带着符号


Math：
parseInt(a,b)将a按照b进制转换成十进制
 NumberObject.toString(radix)//将十进制数字转换为某进制
parseInt(a,n1).toString(n2)将a按照某n1进制，转换为某n2进制
Math.abs() 获取绝对值
Math.ceil() and Math.floor() 向上取整和向下取整
Math.round(num) 四舍五入 
Math.random() 取[0,1)的随机小数
Math.round(Math.random()*m)  0-m随机整数
Math.round(Math.random()*(m-n)+n) 获取[n,m]之间的随机整数
Math.max() and Max.min() 获取一组数据中的最大值和最小值
Math.pow(10，2) and Math.sqrt(100) 求幂和开方
parseFloat(string)给定值被解析成浮点数。如果给定值不能被转换成数值，则会返回 NaN
忽略开始及结束空白，碰到正号负号数字小数点e以外的字符或第二个小数点停止解析





时间API
var myDate = new Date();
myDate.getYear(); //获取当前年份(2位)
myDate.getFullYear(); //获取完整的年份(4位,1970-????)
myDate.getMonth(); //获取当前月份(0-11,0代表1月)
myDate.getDate(); //获取当前日(1-31)
myDate.getDay(); //获取当前星期X(0-6,0代表星期天)
myDate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数)
myDate.getHours(); //获取当前小时数(0-23)
myDate.getMinutes(); //获取当前分钟数(0-59)
myDate.getSeconds(); //获取当前秒数(0-59)
myDate.getMilliseconds(); //获取当前毫秒数(0-999)
myDate.toLocaleDateString(); //获取当前日期
var mytime=myDate.toLocaleTimeString(); //获取当前时间
myDate.toLocaleString( ); //转换为当地时间
myDate.toGMTString()//转换为GMT时区时间
myDate.toUTCString()//转换为UTC时区时间
.toString()
.toTimeString()
.toDateString()



当前时间戳：
第一种方法：
var timestamp = Date.parse(new Date());日期的毫秒
结果：1280977330000
第二种方法：
var timestamp = (new Date()).valueOf();
结果：1280977330748
第三种方法：
var timestamp=new Date().getTime()；时间的毫秒
结果：1280977330748
第四种方法：
var timestamp= Date.now();
格式化时间戳
new Date(timestamp).toLocaleString()
console.time()与coneole.timeEnd()打印一段代码的运行时间
var d = new Date()
        d.setDate(d.getDate()+36)
        d.toGMTString()//返回GMT时区时间
        d.setTime(d.getTime() - 1);//使用时间戳设置时间
        //返回的都是时间对象



判断对象是否具有某个属性

Obj.key
!!obj.key
Key in obj
Obj.hasOwnproperty(key)



扩展运算符，
将一个数组转为用逗号分隔的参数序列  ...arr.slice(0)
将一个对象转为用逗号分割的键值对

JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串
JSON.parse() 方法用于将一个 JSON 字符串转换为对象
对象转换为字符串{}=>"[object Object]"
怎么在对象数组外面加双引号JSON.stringify(arr)

转义无非是两种情况：1：将普通字符转为特殊用途，一般是编程语言中，用于表示不能直接显示的字符，比如后退键，回车键，等。2：用来将特殊意义的字符转换回它原来的意义


Vue.set(this.rulesContent, 'enum', []);

Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致
Object.getOwnPropertyNames(obj) 获取对象可遍历属性
Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键名
Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值。
Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值对数组。
var obj = { foo: 'bar', baz: 42 };
Object.entries(obj)
// [ ["foo", "bar"], ["baz", 42] ]
Object.create方法的第二个参数添加的对象属性（属性p），如果不显式声明，默认是不可遍历的。Object.values不会返回这个属性。

合并对象
Object.assign(item, items); 合并对象
或者
this.form = { ...this.form,
                            paramId: this.form.paramId,
                            paramFullName: this.form.paramFullName,
                            updateFlag: 0
                        };
解构赋值的拷贝是浅拷贝
扩展运算符(...)用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。这等同于使用Object.assign方法
let z = {a:3,b:4};let n = {...z};n //{a:3,b:4}}等同于let z = {a:3,b:4};let n = Object.assign({},z);
let ab = {...a,...b};//等同于//let ab = Object.assign({},a,b);
如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉
如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。后面覆盖前面
如果扩展运算符的参数是null或undefined，这个两个值会被忽略，不会报错。

