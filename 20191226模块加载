
require: node 和 es6 都支持的引入(CommonJS规范)
export / import : 只有es6 支持的导出引入
module.exports / exports: 只有 node 支持的导出(CommonJS规范)
Node应用由模块组成，采用CommonJS模块规范。
CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。
为了方便，Node为每个模块提供一个exports变量，指向module.exports。这等同在每个模块头部，有一行这样的命令。
var exports = module.exports;
于是我们可以直接在 exports 对象上添加方法，表示对外输出的接口，如同在module.exports上添加一样。注意，不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系
module.exports = {
    a: 1
}
module.exports.x = x;
module.exports.addx = addx;
exports.y = y
exports = y//这么写是错误的

ES6
export 和 export default的区别：
在一个文件或模块中，export、import可以有多个，export default仅有一个
通过export方式导出，在导入时要加{ }，export default则不需要
export能直接导出变量表达式，export default不行。




/**ES6模块导出与加载
 * 关于导出
 * 提供对外接口名称，接口名与模块内部变量之间，建立了一一对应的关系
 * 导出方式：
 * 正常输出：可以单个export，可以整体export {}
 * 1、export var m=1                   => import {m} from ''           //import * as ex from ''
 * 2、var m=1 ; export {m,m as mm}     => import {mm as mmm} from ''  //import * as ex from ''
 * 3、var m=1 ; export m //不能这么写报错
 * 默认输出（一个模块只能有一个）export default命令其实是输出一个叫做default的变量
 * 1、export default function (){}     => import any from ''
 * 2、var m=1 ; export default m;      => import any from ''
 * 3、export default var m=1 //不能这么写报错
 * 正常输出和默认输出可以在一个模块共存   => import default,{m} from ''
 * 
 * 关于导入
 * 1动态引用，只读变量：可以改导入对象的属相，不可以改导入变量的值
 * 2会自动提升到顶部
 * 3import语句会执行所加载的模块 import './ex1.js'
 * 加载方式：
 * 针对正常输出的加载：export
 * 1、使用大括号加载具体使用的接口名称:import {m} from ''
 * 2、使用*号加载整体为一个对象:import * as ex from ''
 * 针对默认输出的加载：export default
 * 1、不用大括号，可以使用任意名:import any from ''
总结：
 * 使用export导出时, export var a=1;等同于 var a = 1;export {a};导入时都用import {a} from ""
 * 1、import {getName} from "" 导入单个
 * 2、import {getName,a} from ""导入多个
 * 3、import * as api from "" 全部导入
 * 使用export default默认导出时，多个导出相当于封装了一层对象的单个导出
 * export default a ;import any from ""//单个导出的导入any就是a
 * export default {a,b}; import any from ""//多个导出的导入，any是导出的对象{a:1,b:2}


 * 
 * 关于import()
 * import()函数解决import不能在运行时加载问题（动态加载，同步加载）返回promise对象,应用于：条件加载，按需加载，模块动态路径加载
 * import编译时加载（静态加载）;require运行时加载（动态加载,异步加载）
 * if(){
 *  import('').then(module=>{
 *      module.fn()
 *  })
 * }
 * 
 * 关于浏览器脚本加载
 * 加载脚本 默认type="application/javascript" 可省略
 * 异步加载（防堵塞）
 * <script src="path/to/myModule.js" defer></script> defer是“渲染完再执行;按位置顺序执行”，等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；
 * <script src="path/to/myModule.js" async></script> async是“下载完就执行;按时间顺序执行”。一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染
 * 模块加载 设置type="module"；浏览器对于带有type="module"的<script>，都是异步加载，等效于defer
 * <script type="module" src="./foo.js"></script>
 * 模块内部this为undefined
 * 
 * 关于node模块导出与加载：CommonJS 模式
 * CommonJS 模块的输出都定义在module.exports这个属性上面，被视为默认输出等同 export default {}
 * ES6模块加载CommonJS模块：
 * module.exports = {
        foo: 'hello',
        bar: 'world'
    };
 * import any from ''; =>any = {}
 * import {default as any} from ''; => any={}
 * import * as any from ''; =>  any.default = {}
 * 如果模块名不含路径，那么import命令会去node_modules目录寻找这个模块
 * 
 * CommonJS模块加载ES6模块：
 * 使用import()函数
 * export var m={a:'1'}
 * async function fn () {
        var any0 = await import ('./')//promise
        console.log(any0.m)
    }
    fn()
 */
/** * module变量代表当前模块,module.exports是模块公开的接口;exports 是全局模块，指向module.exports，
可以通过exports.name=name 向外导出name;也可以 module.exports=name，但是exports和module.exports不能同时使用
module对象：
1.module.id（模块的标识符。 通常是完全解析后的文件名。） 
2.module.loaded（模块是否已经加载完成，或正在加载中。） 
3.module.parent（最先引用该模块的模块。） 
4.module.paths(模块的搜索路径。) 
5.module.exports(模块的文件级别作用域内有效的作用同module.exports) 
6.module.children(被该模块引用的模块对象。） 
    require模块
    核心模块优先级最高，直接使用名字加载，在有命名冲突的时候首先加载核心模块 var http=require('http');
    文件模块只能按照路径加载
    当 require 遇到一个既不是核心模块,又不是以路径形式表示的文件模块时,会试图去node_modules下寻找
 */

