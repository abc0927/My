样式
2019年2月22日
14:09
 
多个相同元素设置中间间隔
.el-tag + .el-tag { 
margin-left: 10px;
}
 
 
api
2018年11月6日
9:34
 
 
扩展运算符，
将一个数组转为用逗号分隔的参数序列  ...arr.slice(0)
将一个对象转为用逗号分割的键值对
 
JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串
JSON.parse() 方法用于将一个 JSON 字符串转换为对象
对象转换为字符串{}=>"[object Object]"
怎么在对象数组外面加双引号JSON.stringify(arr)
 
转义无非是两种情况：1：将普通字符转为特殊用途，一般是编程语言中，用于表示不能直接显示的字符，比如后退键，回车键，等。2：用来将特殊意义的字符转换回它原来的意义
 
 
Vue.set(this.rulesContent, 'enum', []);
 
Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致
Object.getOwnPropertyNames(obj) 获取对象可遍历属性
Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键名
Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值。
Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值对数组。
var obj = { foo: 'bar', baz: 42 };
Object.entries(obj)
// [ ["foo", "bar"], ["baz", 42] ]
Object.create方法的第二个参数添加的对象属性（属性p），如果不显式声明，默认是不可遍历的。Object.values不会返回这个属性。
 
合并对象
Object.assign(item, items); 合并对象
或者
this.form = { ...this.form,
                            paramId: this.form.paramId,
                            paramFullName: this.form.paramFullName,
                            updateFlag: 0
                        };
解构赋值的拷贝是浅拷贝
扩展运算符(...)用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。这等同于使用Object.assign方法
let z = {a:3,b:4};let n = {...z};n //{a:3,b:4}}等同于let z = {a:3,b:4};let n = Object.assign({},z);
let ab = {...a,...b};//等同于//let ab = Object.assign({},a,b);
如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉
如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。后面覆盖前面
如果扩展运算符的参数是null或undefined，这个两个值会被忽略，不会报错。
 
 
API：
 
.Trim()移除字符串两侧空格
substring( start ,stop) 提取字符串中字符
返回的子串包括 start 处的字符，但不包括 stop 处的字符,第一位是0
 
delete item[key];
arr.push(item)
 
字符串
toUpperCase() 转为大写
toLowerCase()转为小写
 
JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串
JSON.parse() 方法用于将一个 JSON 字符串转换为对象
 
 
input 事件 
oninput 事件在用户输入时触发，它是在元素值发生变化时立即触发
change  事件要在 input 失去焦点的时候才会触发；
 
 e.userId.toLowerCase().trim() == this.userId.toLowerCase().trim()
 
 
 
 
 
 
 
 
 
 
时间API
当前时间戳：
第一种方法：
var timestamp = Date.parse(new Date());日期的毫秒
结果：1280977330000
第二种方法：
var timestamp = (new Date()).valueOf();
结果：1280977330748
第三种方法：
var timestamp=new Date().getTime()；时间的毫秒
结果：1280977330748
第四种方法：
var timestamp= Date.now();
格式化时间戳
new Date(timestamp).toLocaleString()
console.time()与coneole.timeEnd()打印一段代码的运行时间
var d = new Date()
        d.setDate(d.getDate()+36)
        d.toGMTString()//返回GMT时区时间
        d.setTime(d.getTime() - 1);//使用时间戳设置时间
        //返回的都是时间对象
 
 
判断对象中是否具有某个属性
 
 
 
 
不是按钮的如何禁用：按钮统一不适用禁用，而是点击提示
click 判断后return函数
if(this.product_id == ''){
  this.$message('当前版本无' + this.selectType0);
  return
}
 
 
 
 
内存泄漏问题
2018年11月14日
14:44
JavaScript内存管理
 
产l00370656
144不会持续增加
装test20181107
157 不会持续增加
装 test2020
194-163
装test20181107
198-151
装 test2020
215
装testliao_project
477
 
 
https://github.com/wengjq/Blog/issues/1
 
内存泄漏可以定义为应用程序不再需要的内存，因为某种原因其不会返回到操作系统或可用内存池
垃圾回收语言泄漏的主要原因是不需要的引用
常见的JavaScript 内存泄漏
1意外的全局变量
 
添加'use strict'; 在您的JavaScript文件的开头。 这使得能够更严格地解析JavaScript以防止意外的全局变量。
使用全局变量来存储大量数据，请确保将其置空或在完成后重新分配它
2被遗忘的计时器或回调函数
3脱离 DOM 的引用
假设您在JavaScript代码中保留对表的特定单元格（标记）的引用。 在将来的某个时候，您决定从DOM中删除表，但保留对该单元格的引用。 直观地，可以假设GC将回收除了该单元之外的所有东西。 在实践中，这不会发生：单元格是该表的子节点，并且子级保持对其父级的引用。 换句话说，从JavaScript代码对表单元格的引用导致整个表保留在内存中。 在保持对DOM元素的引用时仔细考虑这一点。
4闭包
 
Chrome内存分析工具    TimeLine  更名 Performance    Profiles
基本上有两种类型的泄漏：1、泄漏引起内存使用的周期性增加。2、一次发生的泄漏，并且不会进一步增加内存。
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
xml文件Json文件显示
2018年11月17日
16:15
<<格式化xml.html>><<格式化json.html>> 
 
xml显示
<div class="tab-content" v-html="previewXml"></div>
this.previewXml = '<xmp>' + re.data.xmlStr + '</xmp>';
 
json显示
1使用插件函数
<div class="tab-content" v-html="previewJson" ></div>
var resultJson = ''
re.data.jsonArray.forEach((item)=>{
resultJson+=formatFile.formatJson(item)
})
this.previewJson = '<pre>' + resultJson + '</pre>';
2 使用stringify格式序列化
var jsonobj = JSON.stringify(obj,null,4)
var result = '<pre>' + jsonobj + '</pre>'
d1.innerHTML = result
 
 
比较两个对象是否相同
1使用Object.getOwnPropertyNames()
isObjectValueEqual(a, b) {//比较两个对象是否相同
var aProps = Object.getOwnPropertyNames(a);
var bProps = Object.getOwnPropertyNames(b);
// console.log(aProps,bProps)
aProps.pop() // 剔除"__ob__"
bProps.pop()
if (aProps.length != bProps.length) {
// console.log('length不同')
return false;
}
for (var i = 0; i < aProps.length; i++) {
var propName = aProps[i];
if (a[propName] !== b[propName]) {
// console.log('value不同,不同项：', propName)
return false;
}
}
return true;
},
 
2 使用JSON.stringify()
把对象序列化为字符串，直接比较两个字符串是否相同
 
 
cookie
2018年11月21日
17:14
 
 
 
export function getCookie(name){
var arr,reg=new RegExp("(^|)"+name+"=([^;]*)(;|$)");
if(arr=document.cookie.match(reg))
return (arr[2]);
else 
return null;
}
获取cookie要使用unescape()解码
export function setCookie(c_name,value,expiredays){
var expdate = new Date();
if (window.navigator.userAgent.indexOf('Chrome') !== -1) {//chrome有时差8个时区
expiredays = expiredays + 1/3;
}
expdate.setDate(expdate.getDate()+expiredays);
document.cookie=c_name+"="+escape(value)+((expiredays==null)?"":";expires="+expdate.toGMTString());
//document.cookie =" name = secape(value) ;expires = expdate"
}
设置cookie的value要使用escape()加密
export function delCookie(name){
var exp = new Date();
exp.setTime(exp.getTime() - 1);
var cval=getCookie(name);
if(cval!=null) 
document.cookie= name + "="+cval+";expires="+exp.toGMTString();
}
 
 
 
cookie要使用unescape() 函数解码使用 escape() 编码
获取：document.cookie.match(reg)   this.arr = JSON.parse(unescape(getCookie(key))) || []
设置：document.cookie = 'name =escape(value);sxpires = time'
删除：document.cookie = 'name =escape(value);sxpires = time-1'
 
 
cookie
设置发送过程：
客户端发送一个http请求到服务器端 服务器端发送一个http响应到客户端，其中包含Set-Cookie头部 客户端发送一个http请求到服务器端，其中包含Cookie头部 服务器端发送一个http响应到客户端
客户端 （request header）-> 服务器 （response header）- > 客户端
会话跟踪
查看网站cookie 控制台 javascript:alert (document. cookie)
 
中文属于Unicode字符，在内存中占4个字符，而英文属于ASCII字符，内存中只占2个字节。
Cookie中使用Unicode字符时需要对Unicode字符进行编码，否则会乱码。
如果值为二进制数据，则需要使用BASE64编码
 
 
 
 
数组
<<数组.txt>> 
2018年11月21日
17:37
 
API
indexOf() 方法用于查找元素在数组中第一次出现时的索引，如果没有，则返回-1。
arr.indexOf(element, fromIndex=0)
element 为需要查找的元素。
fromIndex 为开始查找的位置，缺省默认为0。如果超出数组长度，则返回-1。如果为负值，假设数组长度为length，则从数组的第 length + fromIndex项开始往数组末尾查找，如果length + fromIndex<0 则整个数组都会被查找
indexOf使用严格相等
 
find() 返回数组中第一个满足条件的元素（如果有的话）， 如果没有，则返回undefined。
findIndex()它返回数组中第一个满足条件的元素的索引（如果有的话）否则返回-1。
语法：arr.find(fn, thisArg)，arr.findIndex(fn, thisArg)
fn 表示在数组每一项上执行的函数，接受三个参数：
value 当前正在被处理的元素的值
index 当前元素的数组索引
array 数组本身
thisArg 可选，用来当做fn函数内的this对象
arr.findIndex(function(value,index,array){
 return value>5
})
arr.find(function(value, index, arr){
    return value > 20;
})
arr.find(s=>{
    return s > 20;
})
arr.find(s=> s > 20)
 
 
to.matched.some( m => m.meta.auth)
matched是匹配到的路由集合数组
every() 方法使用传入的函数测试所有元素，只要其中有一个函数返回值为 false，那么该方法的结果为 false；如果全部返回 true，那么该方法的结果才为 true
Some()方法使用传入的函数测试所有元素，只要有一个函数返回值为 true，则该方法返回 true，若全部返回 false，则该方法返回 false。
var arr=[1,2,3,4,5]
var b=arr.some(function(item){
    console.log(item);
    return item > 10;
})
console.log(b)  测试条件要是用return返回判断值
 
splice() 方法向/从数组中添加/删除项目，然后返回被删除的元素组成的数组。会改变原数组
Splice:
Var a = [1,2,3]
Var b = a.splice(2,1)
a//[1,2]
b//[3]
更改原数组，返回更改值（删除的元素）
Slice()方法返回截取数组部分元素组成的新数组，不会改变原数组
复制数组的小技巧 var arr1 = arr0.slice(0)
 
 
filter()数组过滤 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素,如果没有符合条件的元素则返回空数组,
filter() 不会改变原始数组
array.filter(function(currentValue,index,arr), thisValue)
thisValue可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。
如果省略了 thisValue ，"this" 的值为 "undefined"
var arr=[1,2,3,4,5];
var a=3;
var brr=arr.filter(function(item){
    return item > a;
})
forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数；返回值undefined
 var crr=arr.forEach(function(item,index){
     arr[index] = item + a
})
通过arr[index]改变原数组 不需要return
map() 方法遍历数组，使用传入函数处理每个元素，并返回函数的返回值组成的新数组
会改变原数组
通过arr[index]改变原数组 需要return返回值组成新数组
this.workstationsArray2 = this.workstationsArray.map(item => {//拿到工位辨别是否被占用
                            if(workstationsArray1.indexOf(item)>-1){
                                return {
                                    label: item,
                                    value: item,
                                    disabled:true,
                                }
                            }else{
                                return {
                                    label: item,
                                    value: item,
                                    disabled:false,
                                }
                            }
                        })
reverse()倒置
 
 
拼接数组
Arr1.push(…brr)
Arr1.concat(brr)
 
排序
sort()方法对数组元素进行排序，并返回这个数组，
sort会改变原数组
comparator(prop, fn) { //对象数组排序比较器
                return function (a, b) {
                    var x = a[prop];
                    var y = b[prop];
                    if (x === y) {
                        return typeof fn === 'function' ? fn(a, b) : 0;
                    } else {
                        return x > y ? -1 : 1;
                    }
                }
            },
 
re.data.sort(this.comparator('groupName',this.comparator('paramId')))
this.product_template = re.data.reverse();
 
数字字符排序比较器
规则字符串 MP1 MP2 MP10
var reg =  /[^0-9]*/igm//把字符用0替换，数字字符串排序
                    r.data.sort(function(a,b){
                        let x = a.replace(reg,0)
                        let y = b.replace(reg,0)
                        return x-y;
                    })
 
 
 
 
遍历不定维数组使用函数自调方法：
traverse(arr){
                arr.forEach(item=>{
                    let isExpend = this.treeExpendedArray.some(e=>{
                        return e == item.id
                    })
                    if(isExpend){
                        Vue.set(item,"isExpend",true)
                    }else{
                        Vue.set(item,"isExpend",false)
                    }
                    if(item.children.length>0){
                        this.traverse(item.children)
                    }
                })
            },
 
 
 
 
对象数组排序比较器
compare1(prop,fn){ 
return function(a,b){
var x=a[prop];
var y=b[prop];
if(x===y){
return typeof fn ==='function'?fn(a,b):0;
} else{
return x>y?-1:1;
}
}
},
tableData.sort(this.compare1('assemblyType', this.compare1('bomCode', this.compare1(
'workProcedure',this.compare1('stationCode'))))) 
//数据排序，表格合并前处理
 
 
语法
2018年11月23日
18:19
 
switch(n)
{
case 1:
  执行代码块 1
  break;
case 2:
  执行代码块 2
  break;
default:
  n 与 case 1 和 case 2 不同时执行的代码
}
 
 
 
判定数据类型
Typeof value == 'object'
 
 
异步
2018年12月21日
10:50
 
Promise是一个构造函数,自己有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法
new了一个Promise，并没有调用它，但是传进去的函数就已经执行了，这是需要注意的一个细节。所以我们用Promise的时候一般是包在一个函数中return出promise对象，在需要的时候去运行这个函数，Promise对象上有then、catch方法
应用：把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方式执行回调函数
Resolve,reject方法传递的是回调参数 resolve('成功回调数据') reject('失败回调数据')
then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调
catch方法接受一个参数
1用来指定reject的回调，
2在执行resolve的回调时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中，如果不用Promise，代码运行到错误直接在控制台报错，不再往下运行了，但是在promise中会继续往下运行
promise.all方法并行执行多个异步，谁跑的慢以谁为准执行回调，参数为所有异步的promise对象
Promise.race方法并行执行多个异步谁跑的快以谁为准，执行快的回调，慢的回调不执行，但是异步函数内部还是正常执行，应用：拦截比较慢的异步回调
 
        var p = Promise.resolve("传递数据")//promise对象
        p.then(re=>{
            console.log('promise异步' + re)
        })
        console.log('同步')
 
 
Function p (){
        var p1 = new Promise(function(resolve,reject){
            console.log('执行promise');
            setTimeout(()=>{
                console.log('执行timeout')
                // resolve('成功回调数据2')//放到异步内执行回调
            },0)
            resolve('成功回调数据1')//放到异步外执行回调
            // reject("失败回调数据")
        }).then((re)=>{//没有reject不会执行catch,有了reject后会执行catch后面的then，不会执行catch前面的then
            console.log(re)
            return '直接返回的数据' //或者是其他异步返回promise对象
        }).then((re)=>{
            console.log(re)//直接返回的数据
        })
 
        p1.then((re)=>{//外层回调
            console.log('外层then' + re)
        })
        p1.catch((er)=>{
            console.log('外层catch' + er)
        })
Return p1;
}
p();
 
Promise.race
 
        function p1 (){
            var p11 = new Promise(function(resolve,reject){
                setTimeout(()=>{
                    console.log('1m后执行')
                    resolve("1m成功回调")
                },1000)
            })
            return p11
        }
        function p2 (){
            var p21 = new Promise(function(resolve,reject){
                setTimeout(()=>{
                    console.log('2m后执行')
                    reject("2m失败回调")
                },2000)
            })
            return p21
        }
        Promise.race([p1(),p2()]).then(re=>{
            console.log(re)
        }).catch(er=>{
            console.log(er)
        })
 
回调函数：
function runAsync(callback){
    setTimeout(function(){
        console.log('执行1');
            if(typeof callback == 'function'){
                callback(data)// 传递给回调函数参数
            }else{
                console.log(callback)
            }
    }, 2000);
}
 
runAsync(function(data){//定义回调函数
    console.log('执行2');
});
执行顺序：1 => 2
 
 
 
Promse.all在处理多个异步处理时非常有用，比如说一个页面上需要等两个或多个ajax的数据回来以后才正常显示，在此之前只显示loading图标
Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，
 
即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。
 
 
 
批量异步执行后执行对应操作：
 
Promise.all(
                        this.multipleSelection.map((item,index)=>{//使用map进行返回异步
                            let result = ParamLibOp.affectedParamSet(item.tableId)//异步操作
                            return result; //必须有return异步
                        })
                    ).then(s=>{//所有异步返回对象组成的数组
                        s.forEach((re,index)=>{//每个异步的返回数据
                            // this.delLinkData2.push(...re.data)
                            re.data.forEach(item=>{//返回数组中的每个数据
                                this.delLinkData2.push(item)
                            })
                        })
                        this.delLinkData2.sort(this.comparator('paramId',this.comparator('projectName')))
                        this.delLinkDataVisible2 = true//在批量异步后执行
                    })
获取异步请求的数据： index 是互相对应的，可以通过.then 下的index获取发请求的对应入参
 
 
Promise.all([p1, p2]).then((result) => {
  console.log(result)       
}).catch((error) => {
  console.log(error)
})
 
 
在异步函数执行后执行操作：
delParam(id){//异步函数，需要返回异步响应
                let re = ParamLibOp.deleteParamLib(id).then(re=>{
                    console.log('异步函数执行')
                    this.$message('删除成功')
                }).catch(er=>{
                    this.$message('删除失败')
                })
                return re
}
this.delParam(id).then(()=>{
//异步函数后执行的操作
})
 
 
 
异步函数a内有异步函数b，如何等异步函数a和b执行完后执行c，执行顺序a=>b=>c
 
 
function fn1(){
    let asyfn1 = 异步操作1.then(()=>{
        执行操作1
        let asyfn2 = 异步操作1内的异步操作2.then(()=>{
            执行的操作2
        })
        return asyfn2;
    })
    return asyfn1;
}
function fn2(){
    执行操作31
    let asyfn3 = 异步操作3.then(()=>{
        执行操作32
    })
}
fn1.then(()=>{
    执行操作3
    return fn2()
}).then(()=>{
    执行操作4
})
 
执行顺序：1=>2 =>3 =>31=> 32=> 4  
(2和3的顺序怎么保证的？) 
内层异步是否执行如果无法保证，就把内层的异步拿出来使用链式操作
 
 
 
 
this.getxmlfilePath().then(()=>{//异步链式操作
                            return this.createNewDiagram()
                        }).then(()=>{
                            console.log('生成预览后保存')
                            this.submitSequence2()
                        })
 
 
 
三个异步函数独立，执行顺序为a=>b=>c
注意：异步函数abc要最后返回了一个Promise对象，只有promise才有then方法，所以在链式调用中间要添加return
1、链式调用
a()
  .then(function (data) {
    return b(data)//使用return返回Promise对象调用then方法
  })
  .then(function (data) {
    return c(data)
  })
  .then(function (data) {
    console.log(data)// abc
  })
2、构建队列方法
特点：封装方法，可移植到别处使用
// 构建队列函数
 function queue(arr) {
  var sequence = Promise.resolve()
  arr.forEach(function (item) {
    sequence = sequence.then(item)
  })
  return sequence
}
// 执行队列
queue([a, b, c])
  .then(data => {
    console.log(data)// abc
  })
3、使用async 和 await
async function queue(arr) {
  let res = null
  for (let promise of arr) {
    res = await promise(res)
  }
  return await res
}
queue([a, b, c])
  .then(data => {
    console.log(data)// abc
  })
 
 
 
 
执行顺序：同步 > 异步 > 回调 
 
for (var i = 0; i <= 5; i++) {
                setTimeout(function() {
                    console.log( i );
                }, i*1000);
                console.log( ' i : ' , i );
            }
            console.log( i );  
 
 
for 内部console => for外部 console => setTimeout内部 console
for循环和外层的 console.log()是同步的，setTimeout是回调执行
 
var p = new Promise(
                function (resolve,reject){
                    console.log(1) //同步
                    setTimeout(()=>{//回调
                        console.log(3)
                    })
                    resolve(true)//执行同意的21
                    reject(true) //执行拒绝的22
                }
            )
            p.then(()=>{ //异步
                console.log(21)
            })
            p.catch(()=>{ //异步
                console.log(22)
            })
 
执行结果：1 21 3
 
let p = new Promise(function(resolve,reject){
                            _this.creatPreview()
                            resolve(true)
                        })
                        p.then(()=>{
                            setTimeout(()=>{
                                _this.submitSequence2()
                            },1000)
                        })
 
var b = new Promise(
                function() {
                    console.log(5)
                    setTimeout(() => console.log(6), 0)
                }
            )
不用then和catch，可以不给resolve,reject参数
 
 
 
async：
async 函数的实际返回值总是一个 Promise 对象
如果函数中有返回值 ,会调用Promise.resolve()返回一个promise对象，函数返回值为resolve方法的参数，只执行then回调
如果函数内部抛出错误，会调用Promise.reject() 返回一个promise对象，只执行catch回调，但是会执行catch后面的then回调
 
        async function  p(flag){
            if(flag){
                setTimeout(()=>{
                    console.log('异步执行1')
                },1000)
                // return '强制异步数据'
            }else{
                throw '抛出错误'
            }
            return '强制异步数据'
        }
        //async函数执行返回promise对象，将同步转换为异步
        p(true).then(re=>{
            console.log(re)
        })
        p(false).then(re=>{
            console.log(re)
        }).catch(er=>{
            console.log(er)
        })
        console.log('同步执行')
 
await 按顺序控制异步操作
只能放到async 函数里面，await后面接
大多放一个返回promise对象的表达式：使得异步代码就像同步代码一样按顺序执行，阻塞主函数的执行
promise对象为resolve ：返回的promise对象调用对应回调函数执行完后，再向下走，
promise对象为rejected：返回的promise对象调用对应回调函数执行完后，不再向下走，终止主函数执行
对于非Promise对象，await等待函数或者直接量的返回，而不是等待其执行结果
 
        function p1() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    console.log("异步执行1")
                    // resolve("异步数据1")
                    reject("异步数据1")
                },2000)
            })
        }
        function p2() {
            setTimeout(() => {
                console.log("异步执行21")
            },1000)
            console.log('异步执行20')
        }
        function p11(){
            p1().then(re=>{
                console.log(re)
            })
        }
        async function p0() {
            let result0 = await "等待数据0"
            let result1 = await p1() //await后接promise对象，异步强制按同步执行，如果是reject会终止向下执行
            let result2 = await p2()//await后接非promise对象，只等待函数或直接量的返回而不是等待执行结果
            // let result3 = await p11() //await后接非promise对象            console.log("异步执行0", result0, result1, result2)
            return "async数据"
        }
        p0().then(re=>{
            console.log(re)
        }).catch(er=>{//如果执行的reject会终止async函数的执行
            console.log(er)
        })
        console.log('同步执行')
