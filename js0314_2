常识
2019年1月24日
18:27
浏览器快捷键
Ctrl+Tab 或 Ctrl+PgDown                切换到下一个标签页。
Ctrl+Shift+Tab 或 Ctrl+PgUp            切换到上一个标签页。
Ctrl+W 或 Ctrl+F4                     关闭当前标签页或弹出窗口。
Alt 和向左箭头键。    转到当前标签页的上一页浏览历史记录
obj[name]只有name为变量才可以这么写        obj['name']        obj.name
var obj = { name:'name1'} 这里的那么不是变量
var {a,b,c} = {a:'a1'} 
console.log(a,b,c)//a1 undefined undefined
            console.log( 'a' in {a:'b1'}) //true
            console.log({a:'a1'} instanceof Object ) //true
            function aa (){}  console.log(aa instanceof Function ) //true
in：判断一个属性是否属于某个对象
instanceof：根据原型链来判断
获取对象属性的信息 Object.getOwnPropertyDescriptor({pro:true}, 'pro');
创建对象属性的信息 Object.defineProperty(obj,'name',{configurable:false,writable:false,enumerable:true,value:'name1'})
//尾部添加元素arr.push(-55);
//头部添加元素arr.unshift(-11)
//尾部删除元素arr.pop();
//头部删除元素arr.shift();
 
var arr = [1,2]
Array.prototype.x = 'add' 使用in遍历数组会访问到在原型链上添加的元素
for ( let i=0; i<arr.length;i++){
  if(arr.hasOwnProperty(i)){//过滤原型链上面的属性
     console.log(arr[i])
  }
}
 
 
 
 
正则
2019年2月18日
18:57
 
## ^ 匹配字符串的开始。
## $ 匹配字符串的结尾。
## \b 匹配一个单词的边界。
## \d 匹配任意数字。
## \D 匹配任意非数字字符。
## x? 匹配一个可选的 x 字符 (换言之，它匹配 1 次或者 0 次 x 字符)。
## x* 匹配0次或者多次 x 字符。
## x+ 匹配1次或者多次 x 字符。
## x{n,m} 匹配 x 字符，至少 n 次，至多 m 次。
## (a|b|c) 要么匹配 a，要么匹配 b，要么匹配 c。
## (x) 一般情况下表示一个记忆组 (remembered group)。你可以利用 re.search 函数返回对象的 groups() 函数获取它的值。
## 正则表达式中的点号通常意味着 “匹配任意单字符”
语法：/正则表达式主体/修饰符  i不区分大小写 g全局匹配 m多行匹配
正则不写/g，默认查找符合的第一个子字符串就跳出
 
字符串方法（search()、replace()、match()、split()）
search()方法，用于检索指定字符串的子字符串，并返回子字符串的起始位置。第一位是0  str.search(/search/i)
replace()方法，用在字符串中的一些字符替换另一些字符，或替换与正则表达式匹配的字符串。str.replace(/replace/i, '替换')   str.replace('replace','替换')
match()方法，可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，并以数组形式返回匹配结果。str.match(/is/gi)
split()方法，用于把一个字符串分割成字符串数组
RegExp对象方法（compile()、exec()、test()）。
语法：var patt = new RegExp(pattern,modifiers); 或 var patt = /pattern/modifiers;
　　pttern为表达式，modifiers为修饰符用于指定全局匹配g，区分大小写i，和多行比配m。
compile()方法，用于在脚本执行过程中编译正则表达式，也可用于改变和重新编译正则表达式。
patt = /dog/g;patt.compile(patt);//patt = new RegExp('dog','g');patt.compile('dog','g');
exec()方法，用于检索字符串中是否有正则表达式的匹配值，有则返回匹配值，否则返回null。
var patt = /cat/g; patt.exec(str)
test()方法，用于检测字符是否匹配某个模式，有则返回true，否则返回false。
patt.test(str)
 
 
 
2019年2月25日
11:23
 
svg使用xml编写
svg文件必须使用.svg后缀名保存
可以在浏览器中直接打开
<?xml version="1.0" standalone="no"?> <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"> <svg width="100%" version="1.1" xmlns="http://www.w3.org/2000/svg"> <circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red"/> </svg>
第一行包含了 XML 声明。请注意 standalone 属性！该属性规定此 SVG 文件是否是“独立的”，或含有对外部文件的引用。
standalone="no" 意味着 SVG 文档会引用一个外部文件 - 在这里，是 DTD 文件。
第二和第三行引用了这个外部的 SVG DTD。该 DTD 位于 “http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd”。该 DTD 位于 W3C，含有所有允许的 SVG 元素。
SVG 代码以 <svg> 元素开始，包括开启标签 <svg> 和关闭标签 </svg> 。这是根元素。width 和 height 属性可设置此 SVG 文档的宽度和高度。version 属性可定义所使用的 SVG 版本，xmlns 属性可定义 SVG 命名空间。
SVG 的 <circle> 用来创建一个圆。cx 和 cy 属性定义圆中心的 x 和 y 坐标。如果忽略这两个属性，那么圆点会被设置为 (0, 0)。r 属性定义圆的半径。
stroke 和 stroke-width 属性控制如何显示形状的轮廓。我们把圆的轮廓设置为 2px 宽，黑边框。
fill 属性设置形状内的颜色。我们把填充颜色设置为红色
 
<p>引入svg文件的几种方法：
1、通过iframe的src属性
2、通过object的data属性
3、通过embed的src属性
4、通过img的src属性
推荐使用iframe标签引入
</p>
<iframe :src="svg" width="300" height="100">
</iframe>
<object :data="svg" type=""></object>
<embed :src="svg"><embed>
<img :src="svg" alt="">
import svg from "./svg.svg";
data() {
return {
svg: svg
 
 
•	矩形 <rect>
•	圆形 <circle>
•	椭圆 <ellipse>
•	线 <line>
•	折线 <polyline>
•	多边形 <polygon>
•	路径 <path>
•	文本 <text>
•	<defs>引用元素的容器
•	<g> 用于把相关元素进行组合的容器元素
路径：
 
•	M = moveto
•	L = lineto
•	H = horizontal lineto
•	V = vertical lineto
•	C = curveto
•	S = smooth curveto
•	Q = quadratic Belzier curve
•	T = smooth quadratic Belzier curveto
•	A = elliptical Arc
•	Z = closepath
 
<path d="M250 150 L150 350 L350 350 Z" 
style="fill:rgba(255,255,255,0);stroke-width:1;stroke:rgb(0,0,0)" />
 
文本：
<text x="10" y="20" style="fill:red;">Several lines:
    <tspan x="10" y="45">First line</tspan>
    <tspan x="10" y="70">Second line</tspan>
</text>
 
画布无限大
视窗为svg的width和height
默认overflow:hidden,
只能通过更改设置overflow:visible 显示视窗以外的画布内容，设置scroll无效
视窗（svg元素）添加到一个div中，可以通过设置很大的视窗显示更多的画布上内容，然后容器可以滚动
 
 
1viewport就是值指SVG图片本身可视区域的大小（视口）(width 和 height)
2viewbox用来定义svg的可视范围
当没有设置viewbox的时候，viewbox就是整个viewport的大小，而当我们设定了viewbox，等于就是告诉SVG，我指定的这个区域是我要显示的，SVG就会把这个区域放大到viewport的大小，比如电视机
3preserveAspectRatio和viewbox是一个绝配的搭档，特别是当viewbox的值和viewport的值（也就是宽和高）不一样的时候，preserveAspectRatio属性就直接决定浏览器怎么来显示图片
 
viewBox="0 0 115 190"
viewBox 接收四个参数值，分别是 min-x，min-y，width，height。
min-x 和 min-y 决定了 viewBox 的左上角，width 和 height 决定了 viewBox 的宽和高
 viewBox变大，视口不变，可视范围增加，相当于缩小图片
viewBox变小，视口不变，可视范围减小，相当于放大图片
viewBox不变，视口变大，可视范围增加，相当于更改较大视口，然后viewBox减小，放大图片
相当于是把viewBox的内容放大或缩小到视口上显示
 svg.setAttribute('viewBox','0 0 1300 500');
 
 
preserveAspectRatio 属性用来强制统一缩放比，以保持图形的宽高比。
如果 viewBox 的宽高比和 SVG 视窗的宽高比不同，那么在拉伸 viewBox 来适应视窗的时候，就可能导致 SVG 图形发生扭曲。这个时候 preserveAspectRatio 就派上用场了
preserveAspectRatio = <align> <meetOrSlice>
 
 
 
 
//让svg滚动显示：视口变大，容器固定大小scroll
//更改svg元素的viewBox 大小调整到合适大小
svg.setAttribute('viewBox','100 0 1500 1000');
.svgcontainer{
    height:1000px;
    width:1500px;
    overflow:visible;
}
.viewport{
    transform:matrix(1,0,0,1,0,0)!important;
}
 
Transform
优点：可以做任意的缩放、平移、旋转，且可以用js动态更改属性。
缺点：不能在svg根元素中使用此属性，一般是给svg的所有直接子g元素添加此属性，才能达到缩放svg的效果
 
transform="translate(x-value, y-value)"
transform="scale(x-value, y-value)"
transform="rotate(angle,[centerX, centerY])"
transform="skewX(angle) skewY(angle)"
 
transform:matrix(a,b,c,d,e,f) 矩阵
如果是2D变换，括号里就是6个值得矩阵，如果是3D变换，括号里就是4*4的16值得矩阵
原始值
transform: matrix(1,0,0,1,0,0);
 
 
 
 
 
 
 
 
 
 
 
字节数组，编码与文件
2019年3月6日
15:32
 
编码是将字符串转换为字节数组的过程，解码是将字节数组转换成字符串的过程。
 
进制转换：：
parseInt(string, radix); 函数可解析一个字符串，并返回一个十进制整数。
num.toString(2)方法可把一个 Number 对象转换为一个字符串，并返回结果。
parseInt(num,16).toString(2)  //十六进制转二进制
parseInt(num).toString(2)   //十进制转二进制
parseInt(num,16);   //十六进制转十进制
 
字符与unicode转化：：
let s = String.fromCharCode(i)  unicode编码（十进制） 转换为 字符
let n = str.charCodeAt(0)        字符串中某位置字符 转换为 Unicode 编码(十进制)
let s = str.charAt(3);                 返回字符串指定位置字符
 
unicode编码： 符号的二进制代码
UTF-8编码:Unicode 的实现方式
 
 
字符串与字节流转换：：
字符串 => utf-8字节流 => 十六进制字符串
function  stringToByte(str) {//字符串转utf-8字节数组
                let bytes = new Array();
                let len, c;
                len = str.length;
                for (var i = 0; i < len; i++) {
                    c = str.charCodeAt(i);
                    if (c >= 0x010000 && c <= 0x10FFFF) {
                        bytes.push(((c >> 18) & 0x07) | 0xF0);
                        bytes.push(((c >> 12) & 0x3F) | 0x80);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000800 && c <= 0x00FFFF) {
                        bytes.push(((c >> 12) & 0x0F) | 0xE0);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000080 && c <= 0x0007FF) {
                        bytes.push(((c >> 6) & 0x1F) | 0xC0);
                        bytes.push((c & 0x3F) | 0x80);
                    } else {
                        bytes.push(c & 0xFF);
                    }
                }
                return bytes;
            }
 
2.
var  encoder = new TextEncoder('utf8');//TextEncoder.encode(String);接收一个String类型的参数返回一个Unit8Array;进行编码
var str2 = "字符串"
var arr1 = encoder.encode(str2)//返回的是Unit8Array 数组
var arr2 = stringToByte(str2)//返回的是数组  两个数组内容相同
字节流转十六进制
function hexString(bytes) {
  var arr = bytes.map(function (code) {
    return (code).toString(16).toUpperCase();
  });
 
  return arr.join(' ');
}
 
 
 
字节数组转字符串：：
http请求获取到的网页源码是字节数组，并不是字符串。只有识别了网页所用的编码，例如utf8，将字节数组根据编码的规则，进行解码，才可以获得网页源码的字符串
 
。这个过程浏览器执行，前台可以直接把后台传回的字节数组当做字符串使用
 
function byteToString(arr) {//字节数组转字符串
    if(typeof arr === 'string') {
        return arr;
    }
    var str = '',
        _arr = arr;
    for(var i = 0; i < _arr.length; i++) {
        var one = _arr[i].toString(2),
            v = one.match(/^1+?(?=0)/);
        if(v && one.length == 8) {
            var bytesLength = v[0].length;
            var store = _arr[i].toString(2).slice(7 - bytesLength);
            for(var st = 1; st < bytesLength; st++) {
                store += _arr[st + i].toString(2).slice(2);
            }
            str += String.fromCharCode(parseInt(store, 2));
            i += bytesLength - 1;
        } else {
            str += String.fromCharCode(_arr[i]);
        }
    }
    return str;
}
 
 
 
 
 
编码与解码：：
unescape() 函数可对通过 escape() 编码的字符串进行解码。
escape 方法返回一个包含了 charstring 内容的字符串值（ Unicode 格式）。所有空格、标点、重音符号以及其他非 ASCII 字符都用 %xx 编码代替，其中 xx 等于表示该字符的十六进制数。例如，空格返回的是 "%20"
通过找到形式为 %xx 和 %uxxxx 的字符序列（x 表示十六进制的数字），用 Unicode 字符 \u00xx 和 \uxxxx 替换这样的字符序列进行解码
unescape 方法不能用于解码统一资源标识码 (URI)。
针对URL编码解码使用 encodeURI() 或 decodeURIComponent 和decodeURI 方法。
encodeURI()对 URI 进行完整的编码，如果 URI 组件中含有分隔符，比如 ? 和 #，则应当使用 encodeURIComponent() 方法分别对各组件进行编码，编码方法返回编码副本，不会改变原字符串
 
 
 
关于编码：：
 
1. ASCII码
 
我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。
 
上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。
 
ASCII码一共规定了128个字符的编码，比如空格"SPACE"是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。
 
2、非ASCII编码
 
英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。
 
但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0--127表示的符号是一样的，不一样的只是128--255的这一段。
 
至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。
 
中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的Unicode和UTF-8是毫无关系的。
 
3.Unicode
 
正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。
 
可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。
 
Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字"严"。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。
 
4. Unicode的问题
 
需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。
 
比如，汉字"严"的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。
 
这里就有两个严重的问题，第一个问题是，如何才能区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。
 
它们造成的结果是：1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。2）Unicode在很长一段时间内无法推广，直到互联网的出现。
 
5.UTF-8
 
互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。
 
UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。
 
UTF-8的编码规则很简单，只有二条：
 
1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。
 
2）对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。
 
下表总结了编码规则，字母x表示可用编码的位。
 
Unicode符号范围 | UTF-8编码方式
(十六进制) | （二进制）
--------------------+---------------------------------------------
0000 0000-0000 007F | 0xxxxxxx
0000 0080-0000 07FF | 110xxxxx 10xxxxxx
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
 
跟据上表，解读UTF-8编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。
 
下面，还是以汉字"严"为例，演示如何实现UTF-8编码。
 
已知"严"的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此"严"的UTF-8编码需要三个字节，即格式是"1110xxxx 10xxxxxx 10xxxxxx"。然后，从"严"的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，"严"的UTF-8编码是"11100100 10111000 10100101"，转换成十六进制就是E4B8A5。
 
6. Unicode与UTF-8之间的转换
 
Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储
UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式，根据不同的符号而变化字节长度
 
 
通过上一节的例子，可以看到"严"的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。它们之间的转换可以通过程序实现。
 
在Windows平台下，有一个最简单的转化方法，就是使用内置的记事本小程序Notepad.exe。打开文件后，点击"文件"菜单中的"另存为"命令，会跳出一个对话框，在最底部有一个"编码"的下拉条。
 
 
 
里面有四个选项：ANSI，Unicode，Unicode big endian 和 UTF-8。
 
1）ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。
 
2）Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。
 
3）Unicode big endian编码与上一个选项相对应。我在下一节会解释little endian和big endian的涵义。
 
4）UTF-8编码，也就是上一节谈到的编码方法。
 
选择完"编码方式"后，点击"保存"按钮，文件的编码方式就立刻转换好了。
 
7. Little endian和Big endian
 
上一节已经提到，Unicode码可以采用UCS-2格式直接存储。以汉字"严"为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。
 
这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。
 
因此，第一个字节在前，就是"大头方式"（Big endian），第二个字节在前就是"小头方式"（Little endian）。
 
那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？
 
Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做"零宽度非换行空格"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。
 
如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。
 
8. 实例
 
下面，举一个实例。
 
打开"记事本"程序Notepad.exe，新建一个文本文件，内容就是一个"严"字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。
 
然后，用文本编辑软件UltraEdit中的"十六进制功能"，观察该文件的内部编码方式。
 
1）ANSI：文件的编码就是两个字节"D1 CF"，这正是"严"的GB2312编码，这也暗示GB2312是采用大头方式存储的。
 
2）Unicode：编码是四个字节"FF FE 25 4E"，其中"FF FE"表明是小头方式存储，真正的编码是4E25。
 
3）Unicode big endian：编码是四个字节"FE FF 4E 25"，其中"FE FF"表明是大头方式存储。
 
4）UTF-8：编码是六个字节"EF BB BF E4 B8 A5"，前三个字节"EF BB BF"表示这是UTF-8编码，后三个"E4B8A5"就是"严"的具体编码，它的存储顺序与编码顺序是一致的
获取上传文件的绝对路径
<input type="file" id="fileName" onchange="fileChange(this)" >
function fileChange(file){
  console.log(file.value) //文件绝对路径
}
<input type="file" id="fileName" name="file_name" @change="fileChange($event)">
fileChange(file) {
        let files = document.getElementById('fileName').files[0]
        // console.log(this.getObjectURL(files))
        console.log(files.name) //文件名MP1.xml
        console.log(file.target.value) //文件路径 C:\fakepath\MP1.xml
},
 
 
 
 
 
读文件：
读为字节数组        
let reader = new FileReader()
                reader.readAsArrayBuffer(files);
                reader.onload = function () {
                    var buf = new Uint8Array(reader.result);
                    // console.log(typeof buf) //object 字节数组对象
                    var arr = []
                    for (let i in buf) {
                        arr.push(buf[i])
                    }
 
读为字符串
stringToByte(str) {//字符串转字节数组
                let bytes = new Array();
                let len, c;
                len = str.length;
                for (var i = 0; i < len; i++) {
                    c = str.charCodeAt(i);
                    if (c >= 0x010000 && c <= 0x10FFFF) {
                        bytes.push(((c >> 18) & 0x07) | 0xF0);
                        bytes.push(((c >> 12) & 0x3F) | 0x80);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000800 && c <= 0x00FFFF) {
                        bytes.push(((c >> 12) & 0x0F) | 0xE0);
                        bytes.push(((c >> 6) & 0x3F) | 0x80);
                        bytes.push((c & 0x3F) | 0x80);
                    } else if (c >= 0x000080 && c <= 0x0007FF) {
                        bytes.push(((c >> 6) & 0x1F) | 0xC0);
                        bytes.push((c & 0x3F) | 0x80);
                    } else {
                        bytes.push(c & 0xFF);
                    }
                }
                return bytes;
            },
            string16ToText(hexCharCodeStr){//16进制字符串转文本字符串
                var trimedStr = hexCharCodeStr.trim();
            　　var rawStr = 
            　　trimedStr.substr(0,2).toLowerCase() === "0x"
            　　? 
            　　trimedStr.substr(2) 
            　　: 
            　　trimedStr;
            　　var len = rawStr.length;
            　　if(len % 2 !== 0) {
            　　　　alert("Illegal Format ASCII Code!");
            　　　　return "";
            　　}
            　　var curCharCode;
            　　var resultStr = [];
            　　for(var i = 0; i < len;i = i + 2) {
            　　　　curCharCode = parseInt(rawStr.substr(i, 2), 16); // ASCII Code Value
            　　　　resultStr.push(String.fromCharCode(curCharCode));
            　　}
            　　return resultStr.join("");
            },
            byteToString(buffer){//字节数组转16进制字符串
                return Array.prototype.map.call(new Uint8Array(buffer), x => ("00" + x.toString(16)).slice(-2))
                .join("");
            },
            byteToString2(arr){//字节数组转16进制字符串
                var str = "";
                for (var i = 0; i < arr.length; i++) {
                    var tmp = arr[i].toString(16);
                    if (tmp.length == 1) {
                    tmp = "0" + tmp;
                    }
                    str += tmp;
                }
                return str;
            },
            strToString16(str){ //字符串转16进制字符串
                if(str === ""){
                    return "";
                }
            　　var hexCharCode = [];
            　　hexCharCode.push("0x"); 
            　　for(var i = 0; i < str.length; i++) {
            　　　　hexCharCode.push((str.charCodeAt(i)).toString(16));
            　　}
            　　return hexCharCode.join("");
            },
            byteToStr(buffer){//字节数组转文本字符串
                let str1 = this.byteToString2(buffer)
                let str2 = this.string16ToText(str1)
                return str2
            },
 
