笔记
2018年11月3日
10:47
 
华为账号：rWX619768
易宝账号：SZ001884
共享文件操作：
 
文件夹右键，共享至特定用户，输入工号，复制链接
5G_uTestCloud (file://SZXY1RWX6197681/5G_uTestCloud)
更改ip
file://10.40.89.189/5G_uTestCloud
更改为 \\10.40.89.189\5G_uTestCloud        发送给其他人，后可以直接点击
 
 
我们下个项目前台需要使用的框架是avenue3的标准，前端开发有空可以看看,互相交流学习下：
前端组件库：http://avenueui.alpha.tools.huawei.com/avenueui3/src/dev.php?m=card
UI规范：http://avenueui-ng.inhuawei.com/components/InspireUI
 
后台部署：使用云龙流水线、自助发布
 
 
node_modules (file://SZXY1RWX6197681/node_modules)
\\10.40.89.189\node_modules
 
 
 
 
        
 
 
 
 
npm
2019年3月30日
14:14
 
【原】npm 常用命令详解
今年上半年在学习gulp的使用，对npm的掌握是必不可少的，经常到npm官网查询文档让我感到不爽，还不如整理了一些常用的命令到自己博客上，于是根据自己的理解简单翻译过来，终于有点输出，想学习npm这块的朋友不可错过这些基础命令，新手出品，对本文有疑惑之处还请同学们不耻下问。很久没有写文章啦，后续也希望自己在nodejs这方面有多点内容产出。
 
^+指定版本：比如 "antd": "^3.1.4",，表示安装3.1.4及以上的版本，但是不安装4.0.0，也就是说安装时不改变大版本号。
 +指定版本：比如"classnames": "2.2.5"，表示安装2.2.5的版本
~+指定版本：比如 "babel-plugin-import": "~1.1.0",表示安装1.1.x的最新版本（不低于1.1.0），但是不安装1.2.x，也就是说安装时不改变大版本号和次要版本号
 
npm 常用命令详解
https://www.cnblogs.com/PeunZhang/p/5553574.html
 
npm的package.json中文文档
https://github.com/ericdum/mujiang.info/issues/6/
 
 
 
本文以Windows平台上做测试，以gulp为示例做教程
 
目录（更新于20160117）
npm是什么
npm install 安装模块
npm uninstall 卸载模块
npm update 更新模块
npm outdated 检查模块是否已经过时
npm ls 查看安装的模块
npm init 在项目中引导创建一个package.json文件
npm help 查看某条命令的详细帮助
npm root 查看包的安装路径
npm config 管理npm的配置路径
npm cache 管理模块的缓存
npm start 启动模块
npm stop 停止模块
npm restart 重新启动模块
npm test 测试模块
npm version 查看模块版本
npm view 查看模块的注册信息
npm adduser  用户登录
npm publish 发布模块
npm access 在发布的包上设置访问级别
npm package.json的语法
 
 
npm是什么
NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。
 
npm install 安装模块
基础语法
 
npm install (with no args, in package dir)
npm install [<@scope>/]<name>
npm install [<@scope>/]<name>@<tag>
npm install [<@scope>/]<name>@<version>
npm install [<@scope>/]<name>@<version range>
npm install <tarball file>
npm install <tarball url>
npm install <folder>
 
alias: npm i
common options: [-S|--save|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [--dry-run]
安装包，默认会安装最新的版本
 
npm install gulp
 
 
安装指定版本
 
npm install gulp@3.9.1
安装包并将信息保持到项目的package.json文件中
 
 
 
项目对模块的依赖可以使用下面的 3 种方法来表示（假设当前版本号是 1.1.0 ）：
 
兼容模块新发布的补丁版本：~1.1.0、1.1.x、1.1
兼容模块新发布的小版本、补丁版本：^1.1.0、1.x、1
兼容模块新发布的大版本、小版本、补丁版本：*、x
-S, --save 安装包信息将加入到dependencies（生产阶段的依赖）
 
npm install gulp --save 或 npm install gulp -S
package.json 文件的 dependencies 字段：
 
"dependencies": {
    "gulp": "^3.9.1"
}
-D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它
 
npm install gulp --save-dev 或 npm install gulp -D
package.json 文件的 devDependencies字段：
 
"devDependencies": {
    "gulp": "^3.9.1"
}
-O, --save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）
 
npm install gulp --save-optional 或 npm install gulp -O
package.json 文件的optionalDependencies字段：
 
"optionalDependencies": {
    "gulp": "^3.9.1"
}
-E, --save-exact 精确安装指定模块版本
 
npm install gulp --save-exact 或 npm install gulp -E
输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了
 
"dependencies": {
    "gulp": "3.9.1"
}
模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包
 
npm install
 
 
本地安装（local）
 
npm install gulp
全局安装（global）,使用 -g 或 --global
 
npm install gulp -g
npm uninstall 卸载模块 
基础语法
 
npm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|-D|--save-dev|-O|--save-optional]
 
aliases: remove, rm, r, un, unlink
如卸载开发版本的模块
 
npm uninstall gulp --save-dev
npm update 更新模块
基础语法
 
npm update [-g] [<pkg>...]
npm outdated 检查模块是否已经过时
基础语法
 
npm outdated [[<@scope>/]<pkg> ...]
此命令会列出所有已经过时的包，可以及时进行包的更新
 
 
 
npm ls 查看安装的模块
基础语法
 
npm ls [[<@scope>/]<pkg> ...]
 
aliases: list, la, ll
查看全局安装的模块及依赖 
 
npm ls -g 
npm init 在项目中引导创建一个package.json文件
安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用，也说package.json在项目中是必不可少的。
 
npm init [-f|--force|-y|--yes]
 
 
npm help 查看某条命令的详细帮助 
基础语法
 
npm help <term> [<terms..>]
例如输入npm help install，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件/nodejs/node_modules/npm/html/doc/cli/npm-install.html
 
npm help install
npm root 查看包的安装路径
输出 node_modules的路径
 
npm root [-g]
npm config 管理npm的配置路径
基础语法
 
npm config set <key> <value> [-g|--global]
npm config get <key>
npm config delete <key>
npm config list
npm config edit
npm get <key>
npm set <key> <value> [-g|--global]
对于config这块用得最多应该是设置代理，解决npm安装一些模块失败的问题
 
例如我在公司内网，因为公司的防火墙原因，无法完成任何模块的安装，这个时候设置代理可以解决
 
npm config set proxy=http://xxx.com:8080
又如国内的网络环境问题，某官方的IP可能被和谐了，幸好国内有好心人，搭建了镜像，此时我们简单设置镜像
 
npm config set registry="http://r.cnpmjs.org"
也可以临时配置，如安装淘宝镜像
 
npm install -g cnpm --registry=https://registry.npm.taobao.org
npm cache 管理模块的缓存
基础语法
 
npm cache add <tarball file>
npm cache add <folder>
npm cache add <tarball url>
npm cache add <name>@<version>
 
npm cache ls [<path>]
 
npm cache clean [<path>]
最常用命令无非清除npm本地缓存
 
npm cache clean
npm start 启动模块
基础语法
 
npm start [-- <args>]
该命令写在package.json文件scripts的start字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序，如
 
"scripts": {
    "start": "gulp -ws"
}
此时在cmd中输入npm start命令相当于执行gulpfile.js文件自定义的watch和server命令。
 
如果package.json文件没有设置start，则将直接启动node server.js
 
npm stop 停止模块
基础语法
 
npm stop [-- <args>]
npm restart 重新启动模块
基础语法
 
npm restart [-- <args>]
npm test 测试模块
基础语法
 
npm test [-- <args>]
npm tst [-- <args>]
该命令写在package.json文件scripts的test字段中，可以自定义该命令来执行一些操作，如
 
"scripts": {
    "test": "gulp release"
},
此时在cmd中输入npm test命令相当于执行gulpfile.js文件自定义的release命令。
 
npm version 查看模块版本
基础语法
 
npm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]
 
'npm [-v | --version]' to print npm version
'npm view <pkg> version' to view a package's published version
'npm ls' to inspect current package/dependency versions
查看模块的版本
 
npm version
 
 
npm view 查看模块的注册信息
基础语法
 
npm view [<@scope>/]<name>[@<version>] [<field>[.<subfield>]...]
 
aliases: info, show, v
查看模块的依赖关系
 
npm view gulp dependencies
查看模块的源文件地址
 
npm view gulp repository.url
查看模块的贡献者，包含邮箱地址
 
npm view npm contributors
npm adduser 用户登录
基础语法
 
npm adduser [--registry=url] [--scope=@orgname] [--always-auth]
 
发布模板到npm社区前需要先登录，然后再进入发布的操作
 
npm publish 发布模块
基础语法
 
npm publish [<tarball>|<folder>] [--tag <tag>] [--access <public|restricted>]
 
Publishes '.' if no argument supplied
Sets tag 'latest' if no --tag specified
 
npm access 在发布的包上设置访问级别
基础语法
 
npm access public [<package>]
npm access restricted [<package>]
 
npm access grant <read-only|read-write> <scope:team> [<package>]
npm access revoke <scope:team> [<package>]
 
npm access ls-packages [<user>|<scope>|<scope:team>]
npm access ls-collaborators [<package> [<user>]]
npm access edit [<package>]
npm package.json的语法
英文原版：https://docs.npmjs.com/files/package.json
 
这块内容好多，国内有好心人整理：《npm的package.json中文文档》，从这份文档拷贝出一些比较常见的，如下：
 
默认值
 
npm会根据包内容设置一些默认值。
 
"scripts": {"start": "node server.js"}
 
如果包的根目录有server.js文件，npm会默认将start命令设置为node server.js。
 
"scripts":{"preinstall": "node-waf clean || true; node-waf configure build"}
 
如果包的根目录有wscript文件，npm会默认将preinstall命令用node-waf进行编译。
 
"scripts":{"preinstall": "node-gyp rebuild"}
 
如果包的根目录有binding.gyp文件，npm会默认将preinstall命令用node-gyp进行编译。
 
"contributors": [...]
 
如果包的根目录有AUTHORS文件，npm会默认逐行按Name <email> (url)格式处理，邮箱和url是可选的。#号和空格开头的行会被忽略。
 
name
 
在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。
 
name是这个东西的名字。注意：
 
不要把node或者js放在名字中。因为你写了package.json它就被假定成为了js，不过你可以用"engine"字段指定一个引擎（见后文）。
这个名字会作为在URL的一部分、命令行的参数或者文件夹的名字。任何non-url-safe的字符都是不能用的。
这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰。
在你爱上你的名字之前，你可能要去npm registry查看一下这个名字是否已经被使用了。http://registry.npmjs.org/
version
 
version必须能被node-semver解析，它被包在npm的依赖中。（要自己用可以执行npm install semver）
 
可用的“数字”或者“范围”见semver(7).
 
description
 
放简介，字符串，方便在npm search中搜索
 
keywords
 
关键字，数组、字符串，方便在npm search中搜索
 
bugs
 
你项目的提交问题的url和（或）邮件地址
 
{
 "url" : "http://github.com/owner/project/issues", 
"email" : "project@hostname.com"
}
license
 
你应该要指定一个许可证，让人知道使用的权利和限制的。
 
最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：
 
{ "license" : "BSD" }
如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:
 
"licenses" : [
  { "type" : "MyLicense"
  , "url" : "http://github.com/owner/project/path/to/license"
  }
]
repository
 
指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么npm docs命令能找到你。
 
这样做：
 
"repository" :
  { "type" : "git"
  , "url" : "http://github.com/isaacs/npm.git"
  }
 
"repository" :
  { "type" : "svn"
  , "url" : "http://v8.googlecode.com/svn/trunk/"
  }
URL应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的url。不应该是一个html的项目页面。因为它是给计算机看的。
 
scripts
 
“scripts”是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。
 
参考上面的npm start、npm test命令
 
更多详细请看 npm-scripts(7)
 
config
 
"config" hash可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：
 
{
 "name" : "foo",
 "config" : { "port" : "8080" } 
}
然后有一个“start”命令引用了npm_package_config_port环境变量，用户可以通过npm config set foo:port 8001来重写他。
 
参见 npm-config(7) 和 npm-scripts(7)。
 
dependencies
 
依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。
 
请不要将测试或过渡性的依赖放在dependencieshash中。见下文的devDependencies
 
详见semver(7).
 
version 必须完全和version一致
>version 必须比version大
>=version 同上
<version 同上
<=version 同上
~version 大约一样，见semver(7)
1.2.x 1.2.0, 1.2.1, 等，但不包括1.3.0
http://... 见下文'依赖URL'
* 所有
"" 空，同*
version1 - version2 同 >=version1 <=version2.
range1 || range2 二选一。
git... 见下文'依赖Git URL'
user/repo 见下文'GitHub URLs'
比如下面都是合法的：
 
{ "dependencies" :
  { "foo" : "1.0.0 - 2.9999.9999"
  , "bar" : ">=1.0.2 <2.1.2"
  , "baz" : ">1.0.2 <=2.3.4"
  , "boo" : "2.0.1"
  , "qux" : "<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0"
  , "asd" : "http://asdf.com/asdf.tar.gz"
  , "til" : "~1.2"
  , "elf" : "~1.2.3"
  , "two" : "2.x"
  , "thr" : "3.3.x"
  }
}
devDependencies
 
如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。
 
在这种情况下，最好将这些附属的项目列在devDependencies中。
 
这些东西会在执行npm link或者npm install的时候初始化，并可以像其他npm配置参数一样管理。详见npm-config(7)。
 
对于非特定平台的构建步骤，比如需要编译CoffeeScript，可以用prepublish脚本去实现，并把它依赖的包放在devDependency中。（译者注：prepublish定义了在执行npm publish的时候先行执行的脚本）
 
比如：
 
{ "name": "ethopia-waza",
  "description": "a delightfully fruity coffee varietal",
  "version": "1.2.3",
  "devDependencies": {
    "coffee-script": "~1.6.3"
  },
  "scripts": {
    "prepublish": "coffee -o lib/ -c src/waza.coffee"
  },
  "main": "lib/waza.js"
}
prepublish脚本会在publishing前运行，这样用户就不用自己去require来编译就能使用。并且在开发模式中（比如本地运行npm install）会运行这个脚本以便更好地测试。
 
 
vscode使用
2019年3月30日
14:16
 
•	官方文档（英文版）：Documentation for Visual Studio Code
简介
VSCode是微软推出的一款轻量编辑器，采取了和VS相同的UI界面，搭配合适的插件可以优化前端开发的体验。
布局：左侧是用于展示所要编辑的所有文件和文件夹的文件管理器，依次是`资源管理器`，`搜索`，`GIT`，`调试`，`插件`，右侧是打开文件的编辑区域，最多可同时打开三个编辑区域到侧边。
底栏：依次是`Git Branch`，`error&warning`，`编码格式`
汉化
1、ctrl + shift + p。
2、输入lang，选择Configure Language。
3、修改en，为zh-CN。
4、重启编辑器即可。
 
 
插件
安装插件
Ctry + Shift + X查找对应的扩展，手动下载，从本地安装
注：公司内网可能需要设置：文件->首选项->设置
{
"http.proxy": "http://10.162.107.172:3128",
"http.proxyStrictSSL": false
}
按F1，然后输入extensions：install + 插件名称，找到安装即可
安装扩展
>extensions:Install extensions查找所需要的插件，下载到本地
从本地安装>extensions
插件包直接放置到：
 
Debugger for Chrome：方便js调试的插件，前端项目在Chrome中运行起来之后，可以直接在VSCode中打断点、查看输出、查看控制台，需要配置launch.json,详情见插件说明。
常用快捷键：
Ctrl+Shift+P, F1
Ctrl+P
Ctrl+Shift+X
删除行 Ctrl+Shift+K
注释行 Ctrl+/
上移行 Alt+箭头
格式化Alt+ Shift+F
复制行  Alt+ Shift+箭头
 跳转到指定行：Ctrl+G
 
?    左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3
?    打开一个新窗口： Ctrl+Shift+N
?    代码行缩进Ctrl+[， Ctrl+]
?    折叠打开代码块 Ctrl+Shift+[， Ctrl+Shift+]
?    Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行
?    全屏：F11
?    zoomIn/zoomOut：Ctrl + =/Ctrl + -
?    侧边栏显/隐：Ctrl+B
 
用户配置首选项：
{
    "git.ignoreMissingGitWarning": true,
    "http.proxy": "http://10.162.107.172:3128",
    "http.proxyStrictSSL": false,
    "editor.fontSize": 20,
    "workbench.colorTheme": "Visual Studio Dark",
    "beautify.language": {
        "js": {
            "type": [
                "javascript",
                "json",
                "jsonc"
            ],
            "filename": [
                ".jshintrc",
                ".jsbeautifyrc"
            ]
        },
        "css": [
            "css",
            "scss"
        ],
        "html": [
            "htm",
            "html",
            "vue"
        ]
    },
    "extensions.ignoreRecommendations": false,
    "editor.renderIndentGuides": false,
    "window.zoomLevel": 0,
    "files.associations": {
        "*.vue": "vue"
    },
}
 
 
2.启用保存时自动
在VSCode的配置文件里添加editor.formatOnSave:true即可实现保存时自动格式化
3.快捷键
在VSCode的键盘快捷方式文件里添加
{
  "key": "cmd+b",//自己定键位
  "command": "HookyQR.beautify",
  "when": "editorFocus"
}
 
快捷键
VsCode 快捷键有五种组合方式
•	Ctrl + Shift + ? : 这种常规组合按钮
•	Ctrl + V Ctrl +V : 同时依赖一个按键的组合
•	Shift + V c : 先组合后单键的输入
•	Ctrl + Click: 键盘 + 鼠标点击
•	Ctrl + DragMouse : 键盘 + 鼠标拖动
 
通用快捷键
快捷键	作用
Ctrl+Shift+P,F1	展示全局命令面板
Ctrl+P	快速打开最近打开的文件
Ctrl+Shift+N	打开新的编辑器窗口
Ctrl+Shift+W	关闭编辑器
 
基础编辑
快捷键	作用
Ctrl + X	剪切
Ctrl + C	复制
Alt + up/down	移动行上下
Shift + Alt up/down	在当前行上下复制当前行
Ctrl + Shift + K	删除行
Ctrl + Enter	在当前行下插入新的一行
Ctrl + Shift + Enter	在当前行上插入新的一行
Ctrl + Shift + | 匹配花括号的闭合处，跳转	 
Ctrl + ] / [	行缩进
Home	光标跳转到行头
End	光标跳转到行尾
Ctrl + Home	跳转到页头
Ctrl + End	跳转到页尾
Ctrl + up/down	行视图上下偏移
Alt + PgUp/PgDown	屏视图上下偏移
Ctrl + Shift + [	折叠区域代码
Ctrl + Shift + ]	展开区域代码
Ctrl + K Ctrl + [	折叠所有子区域代码
Ctrl + k Ctrl + ]	展开所有折叠的子区域代码
Ctrl + K Ctrl + 0	折叠所有区域代码
Ctrl + K Ctrl + J	展开所有折叠区域代码
Ctrl + K Ctrl + C	添加行注释
Ctrl + K Ctrl + U	删除行注释
Ctrl + /	添加关闭行注释
Shift + Alt +A	块区域注释
Alt + Z	添加关闭词汇包含
 
导航
快捷键	作用
Ctrl + T	列出所有符号
Ctrl + G	跳转行
Ctrl + P	跳转文件
Ctrl + Shift + O	跳转到符号处
Ctrl + Shift + M	打开问题展示面板
F8	跳转到下一个错误或者警告
Shift + F8	跳转到上一个错误或者警告
Ctrl + Shift + Tab	切换到最近打开的文件
Alt + left / right	向后、向前
Ctrl + M	进入用Tab来移动焦点
 
查询与替换
快捷键	作用
Ctrl + F	查询
Ctrl + H	替换
F3 / Shift + F3	查询下一个/上一个
Alt + Enter	选中所有出现在查询中的
Ctrl + D	匹配当前选中的词汇或者行，再次选中-可操作
Ctrl + K Ctrl + D	移动当前选择到下个匹配选择的位置(光标选定)
Alt + C / R / W	 
 
多行光标操作于选择
快捷键	作用
Alt + Click	插入光标-支持多个
Ctrl + Alt + up/down	上下插入光标-支持多个
Ctrl + U	撤销最后一次光标操作
Shift + Alt + I	插入光标到选中范围内所有行结束符
Ctrl + I	选中当前行
Ctrl + Shift + L	选择所有出现在当前选中的行-操作
Ctrl + F2	选择所有出现在当前选中的词汇-操作
Shift + Alt + right	从光标处扩展选中全行
Shift + Alt + left	收缩选择区域
Shift + Alt + (drag mouse)	鼠标拖动区域，同时在多个行结束符插入光标
Ctrl + Shift + Alt + (Arrow Key)	也是插入多行光标的[方向键控制]
Ctrl + Shift + Alt + PgUp/PgDown	也是插入多行光标的[整屏生效]
 
丰富的语言操作
快捷键	作用
Ctrl + Space	输入建议[智能提示]
Ctrl + Shift + Space	参数提示
Tab	Emmet指令触发/缩进
Shift + Alt + F	格式化代码
Ctrl + K Ctrl + F	格式化选中部分的代码
F12	跳转到定义处
Alt + F12	代码片段显示定义
Ctrl + K F12	在其他窗口打开定义处
Ctrl + .	快速修复部分可以修复的语法错误
Shift + F12	显示所有引用
F2	重命名符号
Ctrl + Shift + . / ,	替换下个值
Ctrl + K Ctrl + X	移除空白字符
Ctrl + K M	更改页面文档格式
 
编辑器管理
快捷键	作用
Ctrl + F4, Ctrl + W	关闭编辑器
Ctrl + k F	关闭当前打开的文件夹
Ctrl + |切割编辑窗口	 
Ctrl + 1/2/3	切换焦点在不同的切割窗口
Ctrl + K Ctrl <-/->	切换焦点在不同的切割窗口
Ctrl + Shift + PgUp/PgDown	切换标签页的位置
Ctrl + K <-/->	切割窗口位置调换
 
文件管理
快捷键	作用
Ctrl + N	新建文件
Ctrl + O	打开文件
Ctrl + S	保存文件
Ctrl + Shift + S	另存为
Ctrl + K S	保存所有当前已经打开的文件
Ctrl + F4	关闭当前编辑窗口
Ctrl + K Ctrl + W	关闭所有编辑窗口
Ctrl + Shift + T	撤销最近关闭的一个文件编辑窗口
Ctrl + K Enter	保持开启
Ctrl + Shift + Tab	调出最近打开的文件列表，重复按会切换
Ctrl + Tab	与上面一致，顺序不一致
Ctrl + K P	复制当前打开文件的存放路径
Ctrl + K R	打开当前编辑文件存放位置【文件管理器】
Ctrl + K O	在新的编辑器中打开当前编辑的文件
 
显示
快捷键	作用
F11	切换全屏模式
Shift + Alt + 1	切换编辑布局【目前无效】
Ctrl + =/-	放大 / 缩小
Ctrl + B	侧边栏显示隐藏
Ctrl + Shift + E	资源视图和编辑视图的焦点切换
Ctrl + Shift + F	打开全局搜索
Ctrl + Shift + G	打开Git可视管理
Ctrl + Shift + D	打开DeBug面板
Ctrl + Shift + X	打开插件市场面板
Ctrl + Shift + H	在当前文件替换查询替换
Ctrl + Shift + J	开启详细查询
Ctrl + Shift + V	预览Markdown文件【编译后】
Ctrl + K v	在边栏打开渲染后的视图【新建】
 
调试
快捷键	作用
F9	添加解除断点
F5	启动调试、继续
F11 / Shift + F11	单步进入 / 单步跳出
F10	单步跳过
Ctrl + K Ctrl + I	显示悬浮
 
集成终端
快捷键	作用
Ctrl + `	打开集成终端
Ctrl + Shift + `	创建一个新的终端
Ctrl + Shift + C	复制所选
Ctrl + Shift + V	复制到当前激活的终端
Shift + PgUp / PgDown	页面上下翻屏
Ctrl + Home / End	滚动到页面头部或尾部
 
定义文件模板：
•	自动保存：File -> AutoSave ，或者Ctrl+Shift+P，输入 auto
前提VSCode安装了vetur
•	先安装 Vetur 扩展 让 VSCode 支持 .vue的扩展名
•	然后 菜单栏 -文件 - 首选项 - 用户代码片段
•	输入vue点击进行设置
把下面的代码片段放入里面
// Place your snippets for Vue here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
 
"Print to console": {
        "prefix": "log",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    },
    "Create vue template": {
        "prefix": "vue",
        "body": [
            "<template>",
            "</template>",
            "<script>",
            "export default {",
            "  name: \"${1:component_name}\",",
            "  data () {",
            "    return {",
            "    };",
            "  }",
            "}",
            "</script>",
            "<style scoped>",
            "</style>"
        ],
        "description": "Create vue template"
    }
•	保存后！新建.vue文件后！在里面输入vue就会看见代码提示！这里输入的提示符是按上面配置里面的prefix属性设定！自己可以随便写！
image.png
•	原理相同！自己想设置不同文件代码片段只需要改设置就可以！随便你是react、angular还是html!
 
